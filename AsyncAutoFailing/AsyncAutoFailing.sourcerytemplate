{"version":3,"instance":"eyJnZW5lcmF0ZWRDb2RlIjoiXG5cbmltcG9ydCBYQ1Rlc3REeW5hbWljT3ZlcmxheVxuXG5cL1wvIE1BUks6IC0gU29tZVNlcnZpY2VQcm90b2NvbEZhaWxpbmdcblxucHVibGljIHN0cnVjdCBTb21lU2VydmljZUZhaWxpbmc6IFNvbWVTZXJ2aWNlUHJvdG9jb2wge1xuICAgIHB1YmxpYyBpbml0KCkge31cblxuICAgIHB1YmxpYyBmdW5jIGdldFNvbWV0aGluZyhfIGlkOiBTdHJpbmcpIGFzeW5jIHRocm93cyAtPiBTb21ldGhpbmcge1xuICAgICAgICBYQ1RGYWlsKFwiXFwoI2Z1bmN0aW9uKSBpcyBub3QgaW1wbGVtZW50ZWQuXCIpXG4gICAgICAgIHJldHVybiAuZml4dHVyZSgpXG4gICAgfVxuXG4gICAgcHVibGljIGZ1bmMgZ2V0RW51bSgpIGFzeW5jIHRocm93cyAtPiBNeUVudW0ge1xuICAgICAgICBYQ1RGYWlsKFwiXFwoI2Z1bmN0aW9uKSBpcyBub3QgaW1wbGVtZW50ZWQuXCIpXG4gICAgICAgIHJldHVybiAuZmlyc3RDYXNlXG4gICAgfVxuXG4gICAgcHVibGljIGZ1bmMgZ2V0RGF0ZSgpIGFzeW5jIHRocm93cyAtPiBEYXRlIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldERhdGEoKSBhc3luYyB0aHJvd3MgLT4gRGF0YSB7XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgcmV0dXJuIC5pbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgZnVuYyBnZXRVUkwoKSBhc3luYyB0aHJvd3MgLT4gVVJMIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldEFycmF5KCkgYXN5bmMgdGhyb3dzIC0+IFtTdHJpbmddIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldERpY3Rpb25hcnkoKSBhc3luYyB0aHJvd3MgLT4gW1N0cmluZzogU3RyaW5nXSB7XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgcmV0dXJuIC5pbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgZnVuYyBwb3N0U29tZXRoaW5nKCkgYXN5bmMgdGhyb3dzIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgIH1cbn1cbiNlbmRpZiIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUiLCJkZXNjcmlwdGlvbiI6IkNyZWF0ZXMgYSBgRmFpbGluZ2AgYmFzZWQgb24gYSBkZXBlbmRlbmN5IHByb3RvY29sLlxuTk9URTogaXQgYXNzdW1lcyB0aGF0IGFsbCBtb2RlbHMgcmV0dXJuZWQgaGF2ZSBhIGBmaXh0dXJlYCBtZXRob2QgcHJldmlvdXNseSBkZWZpbmVkLiIsImZhdm9yaXRlIjp0cnVlLCJ2ZXJzaW9uIjozLCJ1cmwiOiIiLCJydW5Db25maWd1cmF0aW9uIjoic2VsZWN0aW9uIiwidHJpbVdoaXRlc3BhY2VzIjp0cnVlLCJhdXRob3IiOiJFZHVhcmRvIEJvY2F0byIsImlzTG9ja2VkIjpmYWxzZSwic2FtcGxlQ29kZSI6ImVudW0gTXlFbnVtIHtcbiAgICBjYXNlIGZpcnN0Q2FzZVxuICAgIGNhc2Ugc2Vjb25kQ2FzZVxufVxuXG5wcm90b2NvbCBTb21lU2VydmljZVByb3RvY29sIHtcbiAgICBmdW5jIGdldFNvbWV0aGluZyhfIGlkOiBTdHJpbmcpIGFzeW5jIHRocm93cyAtPiBTb21ldGhpbmdcbiAgICBmdW5jIGdldEVudW0oKSBhc3luYyB0aHJvd3MgLT4gTXlFbnVtXG4gICAgZnVuYyBnZXREYXRlKCkgYXN5bmMgdGhyb3dzIC0+IERhdGVcbiAgICBmdW5jIGdldERhdGEoKSBhc3luYyB0aHJvd3MgLT4gRGF0YVxuICAgIGZ1bmMgZ2V0VVJMKCkgYXN5bmMgdGhyb3dzIC0+IFVSTFxuICAgIGZ1bmMgZ2V0QXJyYXkoKSBhc3luYyB0aHJvd3MgLT4gW1N0cmluZ11cbiAgICBmdW5jIGdldERpY3Rpb25hcnkoKSBhc3luYyB0aHJvd3MgLT4gW1N0cmluZzogU3RyaW5nXVxuICAgIGZ1bmMgcG9zdFNvbWV0aGluZygpIGFzeW5jIHRocm93c1xufSIsImNvbnRlbnQiOiJ7JSBtYWNybyBnZXRDbGVhblR5cGVOYW1lIHR5cGVOYW1lICV9XG4gICAgeyUgaWYgdHlwZU5hbWV8Y29udGFpbnM6IFwiSW50ZXJmYWNlXCIgJX1cbiAgICAgICAge3sgdHlwZU5hbWV8cmVwbGFjZTogXCJJbnRlcmZhY2VcIiwgXCJcIn19XG4gICAgeyUgZWxpZiB0eXBlTmFtZXxjb250YWluczogXCJQcm90b2NvbFwiICV9XG4gICAgICAgIHt7IHR5cGVOYW1lfHJlcGxhY2U6IFwiUHJvdG9jb2xcIiwgXCJcIn19XG4gICAgeyUgZW5kaWYgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIG1hY3JvIHJlc29sdmVSZXR1cm5WYWx1ZUZvclJldHVyblR5cGUgbWV0aG9kICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCIsIFwiVVJMXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGUua2luZCA9PSBcImVudW1cIiAlfVxuICAgICAgICAue3sgbWV0aG9kLnJldHVyblR5cGUuY2FzZXMuZmlyc3QubmFtZSB9fVxuICAgIHslIGVsaWYgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZXxjb250YWluczogbWV0aG9kLnJldHVyblR5cGVOYW1lICV9XG4gICAgICAgIC5pbml0KClcbiAgICB7JSBlbHNlICV9XG4gICAgICAgIHslIGlmIG1ldGhvZC5yZXR1cm5UeXBlTmFtZXxjb250YWluczpcIltcIiBhbmQgbWV0aG9kLnJldHVyblR5cGVOYW1lfGNvbnRhaW5zOlwiXVwiICV9XG4gICAgICAgICAgICAuaW5pdCgpXG4gICAgICAgIHslIGVsc2UgJX1cbiAgICAgICAgICAgIC5maXh0dXJlKClcbiAgICAgICAgeyUgZW5kaWYgJX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMucHJvdG9jb2xzICV9eyMgVXNlIHR5cGVzLmltcGxlbWVudGluZy5Bc3luY0F1dG9GYWlsaW5nIGluc3RlYWQgb2YgdHlwZXMucHJvdG9jb2xzIGlmIGRlY2lkZWQgdG8gaGF2ZSB0aGlzIHByb3RvY29sICN9XG57JSBuZXdsaW5lICV9XG5pbXBvcnQgWENUZXN0RHluYW1pY092ZXJsYXlcblxuXC9cLyBNQVJLOiAtIHt7IHR5cGUubmFtZSB9fUZhaWxpbmdcblxueyUgc2V0IGNsZWFuVHlwZU5hbWUgJX0geyUgY2FsbCBnZXRDbGVhblR5cGVOYW1lIHR5cGUubmFtZSAlfSAgeyUgZW5kc2V0ICV9XG5wdWJsaWMgc3RydWN0IHt7IGNsZWFuVHlwZU5hbWV8cmVtb3ZlTmV3bGluZXMgfX1GYWlsaW5nOiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHB1YmxpYyBpbml0KCkge31cbiAgICB7JSBmb3IgbWV0aG9kIGluIHR5cGUuYWxsTWV0aG9kcyAlfVxuXG4gICAgcHVibGljIGZ1bmMge3sgbWV0aG9kLm5hbWUgfX0gYXN5bmMgdGhyb3dzIHslIGlmIG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lICE9IFwiVm9pZFwiICV9LT4ge3sgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUgfX0geyUgZW5kaWYgJX17XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUgIT0gXCJWb2lkXCIgJX1cbiAgICAgICAgeyUgc2V0IHJldHVyblZhbHVlICV9IHslIGNhbGwgcmVzb2x2ZVJldHVyblZhbHVlRm9yUmV0dXJuVHlwZSBtZXRob2QgJX0geyUgZW5kc2V0ICV9XG4gICAgICAgIHJldHVybiB7eyByZXR1cm5WYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIH1cbiAgICB7JSBlbmRmb3IgJX1cbn1cbiNlbmRpZlxuXG57JSBlbmRmb3IgJX0iLCJpZCI6IkY3NkFFNjgyLTlFQTktNDI4Ny05NjM2LTNEODUzNzM4QUM4NyIsImtpbmQiOiJzdGVuY2lsIiwibmFtZSI6IkFzeW5jQXV0b0ZhaWxpbmciLCJyZWdlbmVyYXRpb25Db3VudGVyIjowfQ=="}