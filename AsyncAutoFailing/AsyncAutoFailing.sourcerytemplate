{"version":3,"instance":"eyJpZCI6IjVFOTZEMDVGLTJEODgtNDBDOC1BQ0M1LUIzREU5QThCNzIyMyIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBhIGBGYWlsaW5nYCBiYXNlZCBvbiBhIGRlcGVuZGVuY3kgcHJvdG9jb2wuXG5OT1RFOiBpdCBhc3N1bWVzIHRoYXQgYWxsIG1vZGVscyByZXR1cm5lZCBoYXZlIGEgYGZpeHR1cmVgIG1ldGhvZCBwcmV2aW91c2x5IGRlZmluZWQuIiwiY29udGVudCI6InslIG1hY3JvIGdldENsZWFuVHlwZU5hbWUgdHlwZU5hbWUgJX1cbiAgICB7JSBpZiB0eXBlTmFtZXxjb250YWluczogXCJJbnRlcmZhY2VcIiAlfVxuICAgICAgICB7eyB0eXBlTmFtZXxyZXBsYWNlOiBcIkludGVyZmFjZVwiLCBcIlwifX1cbiAgICB7JSBlbGlmIHR5cGVOYW1lfGNvbnRhaW5zOiBcIlByb3RvY29sXCIgJX1cbiAgICAgICAge3sgdHlwZU5hbWV8cmVwbGFjZTogXCJQcm90b2NvbFwiLCBcIlwifX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gcmVzb2x2ZVJldHVyblZhbHVlRm9yUmV0dXJuVHlwZSBtZXRob2QgJX1cbiAgICB7JSBzZXQgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZSAlfSBcbiAgICBbXG4gICAgICAgIFwiRGF0ZVwiLCBcIkRhdGFcIiwgXCJVUkxcIlxuICAgIF1cbiAgICB7JSBlbmRzZXQgJX1cbiAgICB7JSBpZiBtZXRob2QucmV0dXJuVHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyBtZXRob2QucmV0dXJuVHlwZS5jYXNlcy5maXJzdC5uYW1lIH19XG4gICAgeyUgZWxpZiBmb3VuZGF0aW9uVHlwZXNXaXRoTm9GaXh0dXJlfGNvbnRhaW5zOiBtZXRob2QucmV0dXJuVHlwZU5hbWUgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsc2UgJX1cbiAgICAgICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lfGNvbnRhaW5zOlwiW1wiIGFuZCBtZXRob2QucmV0dXJuVHlwZU5hbWV8Y29udGFpbnM6XCJdXCIgJX1cbiAgICAgICAgICAgIC5pbml0KClcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICAgICAgLmZpeHR1cmUoKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBmb3IgdHlwZSBpbiB0eXBlcy5wcm90b2NvbHMgJX17IyBVc2UgdHlwZXMuaW1wbGVtZW50aW5nLkFzeW5jQXV0b0ZhaWxpbmcgaW5zdGVhZCBvZiB0eXBlcy5wcm90b2NvbHMgaWYgZGVjaWRlZCB0byBoYXZlIHRoaXMgcHJvdG9jb2wgI31cbiNpZiBERUJVR1xuXG5pbXBvcnQgWENUZXN0RHluYW1pY092ZXJsYXlcblxuXC9cLyBNQVJLOiAtIHt7IHR5cGUubmFtZSB9fUZhaWxpbmdcblxueyUgc2V0IGNsZWFuVHlwZU5hbWUgJX0geyUgY2FsbCBnZXRDbGVhblR5cGVOYW1lIHR5cGUubmFtZSAlfSAgeyUgZW5kc2V0ICV9XG5wdWJsaWMgc3RydWN0IHt7IGNsZWFuVHlwZU5hbWV8cmVtb3ZlTmV3bGluZXMgfX1GYWlsaW5nOiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHB1YmxpYyBpbml0KCkge31cbiAgICB7JSBmb3IgbWV0aG9kIGluIHR5cGUuYWxsTWV0aG9kcyAlfVxuXG4gICAgcHVibGljIGZ1bmMge3sgbWV0aG9kLm5hbWUgfX0gYXN5bmMgdGhyb3dzIHslIGlmIG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lICE9IFwiVm9pZFwiICV9LT4ge3sgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUgfX0geyUgZW5kaWYgJX17XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUgIT0gXCJWb2lkXCIgJX1cbiAgICAgICAgeyUgc2V0IHJldHVyblZhbHVlICV9IHslIGNhbGwgcmVzb2x2ZVJldHVyblZhbHVlRm9yUmV0dXJuVHlwZSBtZXRob2QgJX0geyUgZW5kc2V0ICV9XG4gICAgICAgIHJldHVybiB7eyByZXR1cm5WYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIH1cbiAgICB7JSBlbmRmb3IgJX1cbn1cbiNlbmRpZlxuXG57JSBlbmRmb3IgJX0iLCJ2ZXJzaW9uIjozLCJmYXZvcml0ZSI6dHJ1ZSwiYXV0aG9yIjoiRWR1YXJkbyBCb2NhdG8iLCJnZW5lcmF0ZWRDb2RlIjoiI2lmIERFQlVHXG5cbmltcG9ydCBYQ1Rlc3REeW5hbWljT3ZlcmxheVxuXG5cL1wvIE1BUks6IC0gU29tZVNlcnZpY2VQcm90b2NvbEZhaWxpbmdcblxucHVibGljIHN0cnVjdCBTb21lU2VydmljZUZhaWxpbmc6IFNvbWVTZXJ2aWNlUHJvdG9jb2wge1xuICAgIHB1YmxpYyBpbml0KCkge31cblxuICAgIHB1YmxpYyBmdW5jIGdldFNvbWV0aGluZyhfIGlkOiBTdHJpbmcpIGFzeW5jIHRocm93cyAtPiBTb21ldGhpbmcge1xuICAgICAgICBYQ1RGYWlsKFwiXFwoI2Z1bmN0aW9uKSBpcyBub3QgaW1wbGVtZW50ZWQuXCIpXG4gICAgICAgIHJldHVybiAuZml4dHVyZSgpXG4gICAgfVxuXG4gICAgcHVibGljIGZ1bmMgZ2V0RW51bSgpIGFzeW5jIHRocm93cyAtPiBNeUVudW0ge1xuICAgICAgICBYQ1RGYWlsKFwiXFwoI2Z1bmN0aW9uKSBpcyBub3QgaW1wbGVtZW50ZWQuXCIpXG4gICAgICAgIHJldHVybiAuZmlyc3RDYXNlXG4gICAgfVxuXG4gICAgcHVibGljIGZ1bmMgZ2V0RGF0ZSgpIGFzeW5jIHRocm93cyAtPiBEYXRlIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldERhdGEoKSBhc3luYyB0aHJvd3MgLT4gRGF0YSB7XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgcmV0dXJuIC5pbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgZnVuYyBnZXRVUkwoKSBhc3luYyB0aHJvd3MgLT4gVVJMIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldEFycmF5KCkgYXN5bmMgdGhyb3dzIC0+IFtTdHJpbmddIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgICAgICByZXR1cm4gLmluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBmdW5jIGdldERpY3Rpb25hcnkoKSBhc3luYyB0aHJvd3MgLT4gW1N0cmluZzogU3RyaW5nXSB7XG4gICAgICAgIFhDVEZhaWwoXCJcXCgjZnVuY3Rpb24pIGlzIG5vdCBpbXBsZW1lbnRlZC5cIilcbiAgICAgICAgcmV0dXJuIC5pbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgZnVuYyBwb3N0U29tZXRoaW5nKCkgYXN5bmMgdGhyb3dzIHtcbiAgICAgICAgWENURmFpbChcIlxcKCNmdW5jdGlvbikgaXMgbm90IGltcGxlbWVudGVkLlwiKVxuICAgIH1cbn1cbiNlbmRpZiIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjEzLCJmaWxlVVJMIjoiZmlsZTpcL1wvXC9Vc2Vyc1wvYm9jYXRlZHVcL0Rlc2t0b3BcL0FzeW5jQXV0b0ZhaWxpbmcuc291cmNlcnl0ZW1wbGF0ZSIsInJ1bkNvbmZpZ3VyYXRpb24iOiJzZWxlY3Rpb24iLCJzYW1wbGVDb2RlIjoiZW51bSBNeUVudW0ge1xuICAgIGNhc2UgZmlyc3RDYXNlXG4gICAgY2FzZSBzZWNvbmRDYXNlXG59XG5cbnByb3RvY29sIFNvbWVTZXJ2aWNlUHJvdG9jb2wge1xuICAgIGZ1bmMgZ2V0U29tZXRoaW5nKF8gaWQ6IFN0cmluZykgYXN5bmMgdGhyb3dzIC0+IFNvbWV0aGluZ1xuICAgIGZ1bmMgZ2V0RW51bSgpIGFzeW5jIHRocm93cyAtPiBNeUVudW1cbiAgICBmdW5jIGdldERhdGUoKSBhc3luYyB0aHJvd3MgLT4gRGF0ZVxuICAgIGZ1bmMgZ2V0RGF0YSgpIGFzeW5jIHRocm93cyAtPiBEYXRhXG4gICAgZnVuYyBnZXRVUkwoKSBhc3luYyB0aHJvd3MgLT4gVVJMXG4gICAgZnVuYyBnZXRBcnJheSgpIGFzeW5jIHRocm93cyAtPiBbU3RyaW5nXVxuICAgIGZ1bmMgZ2V0RGljdGlvbmFyeSgpIGFzeW5jIHRocm93cyAtPiBbU3RyaW5nOiBTdHJpbmddXG4gICAgZnVuYyBwb3N0U29tZXRoaW5nKCkgYXN5bmMgdGhyb3dzXG59IiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IkFzeW5jQXV0b0ZhaWxpbmciLCJpbnNlcnRpb25Nb2RlIjoiZW5kT2ZGaWxlIn0="}