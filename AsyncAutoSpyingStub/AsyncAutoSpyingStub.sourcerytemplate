{"version":3,"instance":"eyJpZCI6IkEyMTgyNkUxLTU4MzktNDg0Ny04NTRGLTVEQTI1QjY1RDBDMSIsImRlc2NyaXB0aW9uIjoiR2VuZXJhdGVzIGBUZXN0IERvdWJsZXNgIHRoYXQgc2VydmUgYXMgYFNweWAgYW5kIGBTdHViYCBiYXNlZCBvbiBhIGRlcGVuZGVuY3kgcHJvdG9jb2wsIG1vc3RseSBhcHBsaWNhYmxlIGZvciBkYXRhc291cmNlcyBsaWtlIHNlcnZpY2VzIGFuZCByZXBvc2l0b3JpZXMuXG5OT1RFOiBpdCBhc3N1bWVzIHRoYXQgYWxsIG1vZGVscyByZXR1cm5lZCBoYXZlIGEgYGZpeHR1cmVgIG1ldGhvZCBwcmV2aW91c2x5IGRlZmluZWQuXG4qQmFzZWQgb24gYFByb3RvY29sIE1vY2tgIHRlbXBsYXRlIGZyb20gYMWBdWthc3ogS3VjemJvcnNraWAqIiwiY29udGVudCI6InslIG1hY3JvIGdldENsZWFuVHlwZU5hbWUgdHlwZU5hbWUgJX1cbiAgICB7JSBpZiB0eXBlTmFtZXxjb250YWluczogXCJJbnRlcmZhY2VcIiAlfVxuICAgICAgICB7eyB0eXBlTmFtZXxyZXBsYWNlOiBcIkludGVyZmFjZVwiLCBcIlwifX1cbiAgICB7JSBlbGlmIHR5cGVOYW1lfGNvbnRhaW5zOiBcIlByb3RvY29sXCIgJX1cbiAgICAgICAge3sgdHlwZU5hbWV8cmVwbGFjZTogXCJQcm90b2NvbFwiLCBcIlwifX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gc3dpZnRpZnlNZXRob2ROYW1lIG5hbWUgJX17JSB0eXBlZCBuYW1lIGFzIFN0cmluZyAlfXt7IG5hbWUgfCByZXBsYWNlOlwiKFwiLFwiX1wiIHwgcmVwbGFjZTpcIilcIixcIlwiIHwgcmVwbGFjZTpcIjpcIixcIl9cIiB8IHJlcGxhY2U6XCJgXCIsXCJcIiB8IHNuYWtlVG9DYW1lbENhc2UgfCBsb3dlckZpcnN0V29yZCB9fXslIGVuZG1hY3JvICV9XG5cbnslIG1hY3JvIHJlc29sdmVSZXR1cm5WYWx1ZUZvclJldHVyblR5cGUgbWV0aG9kICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGUua2luZCA9PSBcImVudW1cIiAlfVxuICAgICAgICAue3sgbWV0aG9kLnJldHVyblR5cGUuY2FzZXMuZmlyc3QubmFtZSB9fVxuICAgIHslIGVsaWYgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZXxjb250YWluczogbWV0aG9kLnJldHVyblR5cGVOYW1lICV9XG4gICAgICAgIC5pbml0KClcbiAgICB7JSBlbHNlICV9XG4gICAgICAgIHslIGlmIG1ldGhvZC5yZXR1cm5UeXBlTmFtZXxjb250YWluczpcIltcIiBhbmQgbWV0aG9kLnJldHVyblR5cGVOYW1lfGNvbnRhaW5zOlwiXVwiICV9XG4gICAgICAgICAgICAuaW5pdCgpXG4gICAgICAgIHslIGVsaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lfGNvbnRhaW5zOlwiVVJMXCIgJX1cbiAgICAgICAgICAgIC5pbml0KHN0cmluZzogXCJ3d3cudGVzdC5jb21cIikudW5zYWZlbHlVbndyYXBwZWRcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICAgICAgLmZpeHR1cmUoKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBtYWNybyBtZXRob2RSZXN1bHREZWNsYXJhdGlvbiBtZXRob2QgJX1cbnslIHR5cGVkIG1ldGhvZCBhcyBNZXRob2QgJX1cbnslIHNldCByZXR1cm5WYWx1ZSAlfSB7JSBjYWxsIHJlc29sdmVSZXR1cm5WYWx1ZUZvclJldHVyblR5cGUgbWV0aG9kICV9IHslIGVuZHNldCAlfVxuICAgIHslIGlmIG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lICE9IFwiVm9pZFwiICV9XG4gICAgeyUgc2V0IHJldHVyblZhbHVlICV9IHslIGNhbGwgcmVzb2x2ZVJldHVyblZhbHVlRm9yUmV0dXJuVHlwZSBtZXRob2QgJX0geyUgZW5kc2V0ICV9XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIge3sgbWV0aG9kLnNob3J0TmFtZSB9fVJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PHt7IG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lIH19LCBFcnJvcj4gPSAuc3VjY2Vzcyh7eyByZXR1cm5WYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fSlcbiAgICB7JSBlbHNlICV9XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIge3sgbWV0aG9kLnNob3J0TmFtZSB9fVJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFZvaWQsIEVycm9yPiA9IC5zdWNjZXNzKCgpKVxuICAgIHslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBtYWNybyBtZXRob2RSZWNlaXZlZFBhcmFtZXRlcnMgbWV0aG9kICV9XG57JSB0eXBlZCBtZXRob2QgYXMgTWV0aG9kICV9XG4gICAgeyVpZiBtZXRob2QucGFyYW1ldGVycy5jb3VudCA9PSAxICV9XG4gICAgICAgIHslIGNhbGwgc3dpZnRpZnlNZXRob2ROYW1lIG1ldGhvZC5zZWxlY3Rvck5hbWUgJX1SZWNlaXZlZHslIGZvciBwYXJhbSBpbiBtZXRob2QucGFyYW1ldGVycyAlfXt7IHBhcmFtLm5hbWV8dXBwZXJGaXJzdExldHRlciB9fSA9IHt7IHBhcmFtLm5hbWUgfX17JSBlbmRmb3IgJX1cbiAgICAgICAgeyUgY2FsbCBzd2lmdGlmeU1ldGhvZE5hbWUgbWV0aG9kLnNlbGVjdG9yTmFtZSAlfVJlY2VpdmVkSW52b2NhdGlvbnMuYXBwZW5kKHslIGZvciBwYXJhbSBpbiBtZXRob2QucGFyYW1ldGVycyAlfXt7IHBhcmFtLm5hbWUgfX0peyUgZW5kZm9yICV9XG4gICAgeyUgZWxzZSAlfVxuICAgIHslIGlmIG5vdCBtZXRob2QucGFyYW1ldGVycy5jb3VudCA9PSAwICV9XG4gICAgICAgIHslIGNhbGwgc3dpZnRpZnlNZXRob2ROYW1lIG1ldGhvZC5zZWxlY3Rvck5hbWUgJX1SZWNlaXZlZEFyZ3VtZW50cyA9ICh7JSBmb3IgcGFyYW0gaW4gbWV0aG9kLnBhcmFtZXRlcnMgJX17eyBwYXJhbS5uYW1lIH19OiB7eyBwYXJhbS5uYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCV9LCB7JSBlbmRpZiAlfXslIGVuZGZvciAlfSlcbiAgICAgICAgeyUgY2FsbCBzd2lmdGlmeU1ldGhvZE5hbWUgbWV0aG9kLnNlbGVjdG9yTmFtZSAlfVJlY2VpdmVkSW52b2NhdGlvbnMuYXBwZW5kKCh7JSBmb3IgcGFyYW0gaW4gbWV0aG9kLnBhcmFtZXRlcnMgJX17eyBwYXJhbS5uYW1lIH19OiB7eyBwYXJhbS5uYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCV9LCB7JSBlbmRpZiAlfXslIGVuZGZvciAlfSkpXG4gICAgeyUgZW5kaWYgJX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gbWV0aG9kQ2xvc3VyZU5hbWUgbWV0aG9kICV9eyUgdHlwZWQgbWV0aG9kIGFzIE1ldGhvZCAlfXslIGNhbGwgc3dpZnRpZnlNZXRob2ROYW1lIG1ldGhvZC5zZWxlY3Rvck5hbWUgJX1DbG9zdXJleyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gY2xvc3VyZVJldHVyblR5cGVOYW1lIG1ldGhvZCAlfXslIHR5cGVkIG1ldGhvZCBhcyBNZXRob2QgJX17JSBpZiBtZXRob2QuaXNPcHRpb25hbFJldHVyblR5cGUgJX17eyBtZXRob2QudW53cmFwcGVkUmV0dXJuVHlwZU5hbWUgfX0\/eyUgZWxzZSAlfXt7IG1ldGhvZC5yZXR1cm5UeXBlTmFtZSB9fXslIGVuZGlmICV9eyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gbWV0aG9kQ2xvc3VyZURlY2xhcmF0aW9uIG1ldGhvZCAlfVxueyUgdHlwZWQgbWV0aG9kIGFzIE1ldGhvZCAlfVxueyUgaWYgbWV0aG9kLmlzSW5pdGlhbGl6ZXIgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IHZhciB7JSBjYWxsIG1ldGhvZENsb3N1cmVOYW1lIG1ldGhvZCAlfTogKCh7JSBmb3IgcGFyYW0gaW4gbWV0aG9kLnBhcmFtZXRlcnMgJX17eyBwYXJhbS50eXBlTmFtZSB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9eyUgZW5kZm9yICV9KSB7JSBpZiBtZXRob2QudGhyb3dzICV9dGhyb3dzIHslIGVuZGlmICV9LT4geyUgaWYgbWV0aG9kLmlzSW5pdGlhbGl6ZXIgJX1Wb2lkeyUgZWxzZSAlfXslIGNhbGwgY2xvc3VyZVJldHVyblR5cGVOYW1lIG1ldGhvZCAlfXslIGVuZGlmICV9KT9cbnslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBtYWNybyBtZXRob2RDbG9zdXJlQ2FsbFBhcmFtZXRlcnMgbWV0aG9kICV9eyUgdHlwZWQgbWV0aG9kIGFzIE1ldGhvZCAlfXslIGZvciBwYXJhbSBpbiBtZXRob2QucGFyYW1ldGVycyAlfXt7IHBhcmFtLm5hbWUgfX17JSBpZiBub3QgZm9ybG9vcC5sYXN0ICV9LCB7JSBlbmRpZiAlfXslIGVuZGZvciAlfXslIGVuZG1hY3JvICV9XG5cbnslIG1hY3JvIG1vY2tNZXRob2QgbWV0aG9kICV9XG4gICAgeyUgdHlwZWQgbWV0aG9kIGFzIE1ldGhvZCAlfVxuICAgIHslIG5ld2xpbmUgJX0gICBcL1wvIE1BUks6IC0ge3sgbWV0aG9kLnNob3J0TmFtZSB9fVxuXG4gICAgeyUgY2FsbCBtZXRob2RSZXN1bHREZWNsYXJhdGlvbiBtZXRob2QgJX1cbiAgICB7JSBpZiBub3QgbWV0aG9kLmlzSW5pdGlhbGl6ZXIgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IHZhciB7JSBjYWxsIHN3aWZ0aWZ5TWV0aG9kTmFtZSBtZXRob2Quc2VsZWN0b3JOYW1lICV9Q2FsbHNDb3VudCA9IDBcbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IHZhciB7JSBjYWxsIHN3aWZ0aWZ5TWV0aG9kTmFtZSBtZXRob2Quc2VsZWN0b3JOYW1lICV9Q2FsbGVkOiBCb29sIHtcbiAgICAgICAgeyUgY2FsbCBzd2lmdGlmeU1ldGhvZE5hbWUgbWV0aG9kLnNlbGVjdG9yTmFtZSAlfUNhbGxzQ291bnQgPiAwXG4gICAgfVxuICAgIHslIGVuZGlmICV9XG4gICAgeyUgaWYgbWV0aG9kLnBhcmFtZXRlcnMuY291bnQgPT0gMSAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gdmFyIHslIGNhbGwgc3dpZnRpZnlNZXRob2ROYW1lIG1ldGhvZC5zZWxlY3Rvck5hbWUgJX1SZWNlaXZlZHslIGZvciBwYXJhbSBpbiBtZXRob2QucGFyYW1ldGVycyAlfXt7IHBhcmFtLm5hbWV8dXBwZXJGaXJzdExldHRlciB9fToge3sgJygnIGlmIHBhcmFtLmlzQ2xvc3VyZSB9fXt7IHBhcmFtLnR5cGVOYW1lLnVud3JhcHBlZFR5cGVOYW1lIH19e3sgJyknIGlmIHBhcmFtLmlzQ2xvc3VyZSB9fT97JSBlbmRmb3IgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IHZhciB7JSBjYWxsIHN3aWZ0aWZ5TWV0aG9kTmFtZSBtZXRob2Quc2VsZWN0b3JOYW1lICV9UmVjZWl2ZWRJbnZvY2F0aW9uc3slIGZvciBwYXJhbSBpbiBtZXRob2QucGFyYW1ldGVycyAlfTogW3t7ICcoJyBpZiBwYXJhbS5pc0Nsb3N1cmUgfX17eyBwYXJhbS50eXBlTmFtZS51bndyYXBwZWRUeXBlTmFtZSB9fXt7ICcpJyBpZiBwYXJhbS5pc0Nsb3N1cmUgfX17JWlmIHBhcmFtLnR5cGVOYW1lLmlzT3B0aW9uYWwlfT97JWVuZGlmJX1deyUgZW5kZm9yICV9ID0gW11cbiAgICB7JSBlbGlmIG5vdCBtZXRob2QucGFyYW1ldGVycy5jb3VudCA9PSAwICV9XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIgeyUgY2FsbCBzd2lmdGlmeU1ldGhvZE5hbWUgbWV0aG9kLnNlbGVjdG9yTmFtZSAlfVJlY2VpdmVkQXJndW1lbnRzOiAoeyUgZm9yIHBhcmFtIGluIG1ldGhvZC5wYXJhbWV0ZXJzICV9e3sgcGFyYW0ubmFtZSB9fToge3sgcGFyYW0udW53cmFwcGVkVHlwZU5hbWUgaWYgcGFyYW0udHlwZUF0dHJpYnV0ZXMuZXNjYXBpbmcgZWxzZSBwYXJhbS50eXBlTmFtZSB9fXt7ICcsICcgaWYgbm90IGZvcmxvb3AubGFzdCB9fXslIGVuZGZvciAlfSk\/XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIgeyUgY2FsbCBzd2lmdGlmeU1ldGhvZE5hbWUgbWV0aG9kLnNlbGVjdG9yTmFtZSAlfVJlY2VpdmVkSW52b2NhdGlvbnM6IFsoeyUgZm9yIHBhcmFtIGluIG1ldGhvZC5wYXJhbWV0ZXJzICV9e3sgcGFyYW0ubmFtZSB9fToge3sgcGFyYW0udW53cmFwcGVkVHlwZU5hbWUgaWYgcGFyYW0udHlwZUF0dHJpYnV0ZXMuZXNjYXBpbmcgZWxzZSBwYXJhbS50eXBlTmFtZSB9fXt7ICcsICcgaWYgbm90IGZvcmxvb3AubGFzdCB9fXslIGVuZGZvciAlfSldID0gW11cbiAgICB7JSBlbmRpZiAlfVxuICAgIHslIGNhbGwgbWV0aG9kQ2xvc3VyZURlY2xhcmF0aW9uIG1ldGhvZCAlfVxuXG57JSBpZiBtZXRob2QuaXNJbml0aWFsaXplciAlfVxuICAgIHJlcXVpcmVkIHt7IG1ldGhvZC5uYW1lIH19IHtcbiAgICAgICAgeyUgY2FsbCBtZXRob2RSZWNlaXZlZFBhcmFtZXRlcnMgbWV0aG9kICV9XG4gICAgICAgIHslIGNhbGwgbWV0aG9kQ2xvc3VyZU5hbWUgbWV0aG9kICV9Pyh7JSBjYWxsIG1ldGhvZENsb3N1cmVDYWxsUGFyYW1ldGVycyBtZXRob2QgJX0pXG4gICAgfVxueyUgZWxzZSAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gZnVuYyB7eyBtZXRob2QubmFtZSB9fXt7ICcgYXN5bmMnIGlmIG1ldGhvZC5pc0FzeW5jIH19e3sgJyB0aHJvd3MnIGlmIG1ldGhvZC50aHJvd3MgfX17JSBpZiBub3QgbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAlfSAtPiB7eyBtZXRob2QucmV0dXJuVHlwZU5hbWUgfX17JSBlbmRpZiAlfSB7XG4gICAgICAgIHslIGNhbGwgc3dpZnRpZnlNZXRob2ROYW1lIG1ldGhvZC5zZWxlY3Rvck5hbWUgJX1DYWxsc0NvdW50ICs9IDFcbiAgICAgICAgeyUgY2FsbCBtZXRob2RSZWNlaXZlZFBhcmFtZXRlcnMgbWV0aG9kICV9XG4gICAgICAgIHslIGlmIG5vdCBtZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkICV9XG4gICAgICAgIHJldHVybiB0cnkge3sgbWV0aG9kLnNob3J0TmFtZSB9fVJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIH1cbnslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBtYWNybyBtb2NrZWRWYXJpYWJsZU5hbWUgdmFyaWFibGUgJX17eyB2YXJpYWJsZS5uYW1lIH19eyUgZW5kbWFjcm8gJX1cbnslIG1hY3JvIHVuZGVybHlpbmdNb2NrZWRWYXJpYWJsZU5hbWUgdmFyaWFibGUgJX11bmRlcmx5aW5ne3sgdmFyaWFibGUubmFtZXx1cHBlckZpcnN0TGV0dGVyIH19eyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gbW9ja09wdGlvbmFsVmFyaWFibGUgdmFyaWFibGUgJX1cbnslIHR5cGVkIHZhcmlhYmxlIGFzIFZhcmlhYmxlICV9XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIgeyUgY2FsbCBtb2NrZWRWYXJpYWJsZU5hbWUgdmFyaWFibGUgJX06IHt7IHZhcmlhYmxlLnR5cGVOYW1lIH19XG57JSBlbmRtYWNybyAlfVxuXG57JSBtYWNybyBtb2NrTm9uT3B0aW9uYWxBcnJheU9yRGljdGlvbmFyeVZhcmlhYmxlIHZhcmlhYmxlICV9XG57JSB0eXBlZCB2YXJpYWJsZSBhcyBWYXJpYWJsZSAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gdmFyIHslIGNhbGwgbW9ja2VkVmFyaWFibGVOYW1lIHZhcmlhYmxlICV9OiB7eyB2YXJpYWJsZS50eXBlTmFtZSB9fSA9IHslIGlmIHZhcmlhYmxlLmlzQXJyYXkgJX1bXXslIGVsaWYgdmFyaWFibGUuaXNEaWN0aW9uYXJ5ICV9WzpdeyUgZW5kaWYgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIG1hY3JvIG1vY2tOb25PcHRpb25hbFZhcmlhYmxlIHZhcmlhYmxlICV9XG4gICAgeyUgdHlwZWQgdmFyaWFibGUgYXMgVmFyaWFibGUgJX1cbiAgICB7JSBuZXdsaW5lICV9ICAgXC9cLyBNQVJLOiAtIHt7IHZhcmlhYmxlLm5hbWUgfX1cblxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gdmFyIHslIGNhbGwgbW9ja2VkVmFyaWFibGVOYW1lIHZhcmlhYmxlICV9OiB7eyB2YXJpYWJsZS50eXBlTmFtZSB9fSB7XG4gICAgICAgIGdldCB7IHslIGNhbGwgdW5kZXJseWluZ01vY2tlZFZhcmlhYmxlTmFtZSB2YXJpYWJsZSAlfSB9XG4gICAgICAgIHNldCh2YWx1ZSkgeyB7JSBjYWxsIHVuZGVybHlpbmdNb2NrZWRWYXJpYWJsZU5hbWUgdmFyaWFibGUgJX0gPSB2YWx1ZSB9XG4gICAgfVxuICAgIHByaXZhdGUgdmFyIHslIGNhbGwgdW5kZXJseWluZ01vY2tlZFZhcmlhYmxlTmFtZSB2YXJpYWJsZSAlfToge3sgdmFyaWFibGUudHlwZU5hbWUgfX0hXG57JSBlbmRtYWNybyAlfVxuXG57JSBmb3IgdHlwZSBpbiB0eXBlcy5wcm90b2NvbHMgJX17IyBVc2UgdHlwZXMuaW1wbGVtZW50aW5nLkFzeW5jQXV0b1NweWluZ1N0dWIgaW5zdGVhZCBvZiB0eXBlcy5wcm90b2NvbHMgaWYgZGVjaWRlZCB0byBoYXZlIHRoaXMgcHJvdG9jb2wgI31cbnslIHNldCBjbGVhblR5cGVOYW1lICV9IHslIGNhbGwgZ2V0Q2xlYW5UeXBlTmFtZSB0eXBlLm5hbWUgJX0gIHslIGVuZHNldCAlfVxueyUgbmV3bGluZSAlfVwvXC8gTUFSSzogLSB7eyB0eXBlLm5hbWUgfX1TcHlpbmdTdHViXG5cbnt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gZmluYWwgY2xhc3Mge3sgY2xlYW5UeXBlTmFtZXxyZW1vdmVOZXdsaW5lcyB9fVNweWluZ1N0dWI6IHt7IHR5cGUubmFtZSB9fSB7XG5cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IGluaXQoKSB7fVxueyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuYWxsVmFyaWFibGVzfCFkZWZpbmVkSW5FeHRlbnNpb24gJX1cbiAgICB7JSBpZiB2YXJpYWJsZS5pc09wdGlvbmFsICV9eyUgY2FsbCBtb2NrT3B0aW9uYWxWYXJpYWJsZSB2YXJpYWJsZSAlfXslIGVsaWYgdmFyaWFibGUuaXNBcnJheSBvciB2YXJpYWJsZS5pc0RpY3Rpb25hcnkgJX17JSBjYWxsIG1vY2tOb25PcHRpb25hbEFycmF5T3JEaWN0aW9uYXJ5VmFyaWFibGUgdmFyaWFibGUgJX17JSBlbHNlICV9eyUgY2FsbCBtb2NrTm9uT3B0aW9uYWxWYXJpYWJsZSB2YXJpYWJsZSAlfXslIGVuZGlmICV9XG57JSBlbmRmb3IgJX1cbnslIGZvciBtZXRob2QgaW4gdHlwZS5hbGxNZXRob2RzfCFkZWZpbmVkSW5FeHRlbnNpb24gJX1cbiAgICB7JSBjYWxsIG1vY2tNZXRob2QgbWV0aG9kICV9XG57JSBlbmRmb3IgJX1cbn1cbnslIGVuZGZvciAlfSIsInZlcnNpb24iOjMsImZhdm9yaXRlIjp0cnVlLCJhdXRob3IiOiJFZHVhcmRvIEJvY2F0byIsImdlbmVyYXRlZENvZGUiOiJcblwvXC8gTUFSSzogLSBTb21ldGhpbmdSZXBvc2l0b3J5SW50ZXJmYWNlU3B5aW5nU3R1YlxuXG5pbnRlcm5hbCBmaW5hbCBjbGFzcyBTb21ldGhpbmdSZXBvc2l0b3J5U3B5aW5nU3R1YjogU29tZXRoaW5nUmVwb3NpdG9yeUludGVyZmFjZSB7XG5cbiAgICBpbnRlcm5hbCBpbml0KCkge31cbiAgICBcbiAgIFwvXC8gTUFSSzogLSBpbml0XG5cbiAgICBpbnRlcm5hbCB2YXIgaW5pdFJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFNvbWV0aGluZ1JlcG9zaXRvcnlJbnRlcmZhY2UsIEVycm9yPiA9IC5zdWNjZXNzKC5maXh0dXJlKCkpXG4gICAgaW50ZXJuYWwgdmFyIGluaXRJbnB1dFJlY2VpdmVkSW5wdXQ6IFN0cmluZz9cbiAgICBpbnRlcm5hbCB2YXIgaW5pdElucHV0UmVjZWl2ZWRJbnZvY2F0aW9uczogW1N0cmluZ10gPSBbXVxuICAgIGludGVybmFsIHZhciBpbml0SW5wdXRDbG9zdXJlOiAoKFN0cmluZykgLT4gVm9pZCk\/XG5cbiAgICByZXF1aXJlZCBpbml0KGlucHV0OiBTdHJpbmcpIHtcbiAgICAgICAgaW5pdElucHV0UmVjZWl2ZWRJbnB1dCA9IGlucHV0XG4gICAgICAgIGluaXRJbnB1dFJlY2VpdmVkSW52b2NhdGlvbnMuYXBwZW5kKGlucHV0KVxuICAgICAgICBpbml0SW5wdXRDbG9zdXJlPyhpbnB1dClcbiAgICB9XG4gICAgXG4gICBcL1wvIE1BUks6IC0gZmV0Y2hTb21ldGhpbmdXaXRoSURcblxuICAgIGludGVybmFsIHZhciBmZXRjaFNvbWV0aGluZ1dpdGhJRFJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFNvbWV0aGluZywgRXJyb3I+ID0gLnN1Y2Nlc3MoLmZpeHR1cmUoKSlcbiAgICBpbnRlcm5hbCB2YXIgZmV0Y2hTb21ldGhpbmdXaXRoSURDYWxsc0NvdW50ID0gMFxuICAgIGludGVybmFsIHZhciBmZXRjaFNvbWV0aGluZ1dpdGhJRENhbGxlZDogQm9vbCB7XG4gICAgICAgIGZldGNoU29tZXRoaW5nV2l0aElEQ2FsbHNDb3VudCA+IDBcbiAgICB9XG4gICAgaW50ZXJuYWwgdmFyIGZldGNoU29tZXRoaW5nV2l0aElEUmVjZWl2ZWRJZDogU3RyaW5nP1xuICAgIGludGVybmFsIHZhciBmZXRjaFNvbWV0aGluZ1dpdGhJRFJlY2VpdmVkSW52b2NhdGlvbnM6IFtTdHJpbmddID0gW11cblxuICAgIGludGVybmFsIGZ1bmMgZmV0Y2hTb21ldGhpbmdXaXRoSUQoXyBpZDogU3RyaW5nKSBhc3luYyB0aHJvd3MgLT4gU29tZXRoaW5nIHtcbiAgICAgICAgZmV0Y2hTb21ldGhpbmdXaXRoSURDYWxsc0NvdW50ICs9IDFcbiAgICAgICAgZmV0Y2hTb21ldGhpbmdXaXRoSURSZWNlaXZlZElkID0gaWRcbiAgICAgICAgZmV0Y2hTb21ldGhpbmdXaXRoSURSZWNlaXZlZEludm9jYXRpb25zLmFwcGVuZChpZClcbiAgICAgICAgcmV0dXJuIHRyeSBmZXRjaFNvbWV0aGluZ1dpdGhJRFJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cbiAgICBcbiAgIFwvXC8gTUFSSzogLSBmZXRjaEFycmF5T2ZTb21ldGhpbmdcblxuICAgIGludGVybmFsIHZhciBmZXRjaEFycmF5T2ZTb21ldGhpbmdSZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxbU29tZXRoaW5nXSwgRXJyb3I+ID0gLnN1Y2Nlc3MoLmluaXQoKSlcbiAgICBpbnRlcm5hbCB2YXIgZmV0Y2hBcnJheU9mU29tZXRoaW5nQ2FsbHNDb3VudCA9IDBcbiAgICBpbnRlcm5hbCB2YXIgZmV0Y2hBcnJheU9mU29tZXRoaW5nQ2FsbGVkOiBCb29sIHtcbiAgICAgICAgZmV0Y2hBcnJheU9mU29tZXRoaW5nQ2FsbHNDb3VudCA+IDBcbiAgICB9XG5cbiAgICBpbnRlcm5hbCBmdW5jIGZldGNoQXJyYXlPZlNvbWV0aGluZygpIGFzeW5jIHRocm93cyAtPiBbU29tZXRoaW5nXSB7XG4gICAgICAgIGZldGNoQXJyYXlPZlNvbWV0aGluZ0NhbGxzQ291bnQgKz0gMVxuICAgICAgICByZXR1cm4gdHJ5IGZldGNoQXJyYXlPZlNvbWV0aGluZ1Jlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cbiAgICBcbiAgIFwvXC8gTUFSSzogLSBmZXRjaEFycmF5T2ZTb21lRW51bVxuXG4gICAgaW50ZXJuYWwgdmFyIGZldGNoQXJyYXlPZlNvbWVFbnVtUmVzdWx0VG9CZVJldHVybmVkOiBSZXN1bHQ8W1NvbWVFbnVtXSwgRXJyb3I+ID0gLnN1Y2Nlc3MoLmluaXQoKSlcbiAgICBpbnRlcm5hbCB2YXIgZmV0Y2hBcnJheU9mU29tZUVudW1DYWxsc0NvdW50ID0gMFxuICAgIGludGVybmFsIHZhciBmZXRjaEFycmF5T2ZTb21lRW51bUNhbGxlZDogQm9vbCB7XG4gICAgICAgIGZldGNoQXJyYXlPZlNvbWVFbnVtQ2FsbHNDb3VudCA+IDBcbiAgICB9XG5cbiAgICBpbnRlcm5hbCBmdW5jIGZldGNoQXJyYXlPZlNvbWVFbnVtKCkgYXN5bmMgdGhyb3dzIC0+IFtTb21lRW51bV0ge1xuICAgICAgICBmZXRjaEFycmF5T2ZTb21lRW51bUNhbGxzQ291bnQgKz0gMVxuICAgICAgICByZXR1cm4gdHJ5IGZldGNoQXJyYXlPZlNvbWVFbnVtUmVzdWx0VG9CZVJldHVybmVkLmdldCgpXG4gICAgfVxuICAgIFxuICAgXC9cLyBNQVJLOiAtIHBvc3RTb21ldGhpbmdcblxuICAgIGludGVybmFsIHZhciBwb3N0U29tZXRoaW5nUmVzdWx0VG9CZVJldHVybmVkOiBSZXN1bHQ8Vm9pZCwgRXJyb3I+ID0gLnN1Y2Nlc3MoKCkpXG4gICAgaW50ZXJuYWwgdmFyIHBvc3RTb21ldGhpbmdTdHJpbmdQYXJhbUludFBhcmFtU29tZXRoaW5nUGFyYW1DYWxsc0NvdW50ID0gMFxuICAgIGludGVybmFsIHZhciBwb3N0U29tZXRoaW5nU3RyaW5nUGFyYW1JbnRQYXJhbVNvbWV0aGluZ1BhcmFtQ2FsbGVkOiBCb29sIHtcbiAgICAgICAgcG9zdFNvbWV0aGluZ1N0cmluZ1BhcmFtSW50UGFyYW1Tb21ldGhpbmdQYXJhbUNhbGxzQ291bnQgPiAwXG4gICAgfVxuICAgIGludGVybmFsIHZhciBwb3N0U29tZXRoaW5nU3RyaW5nUGFyYW1JbnRQYXJhbVNvbWV0aGluZ1BhcmFtUmVjZWl2ZWRBcmd1bWVudHM6IChzdHJpbmdQYXJhbTogU3RyaW5nLCBpbnRQYXJhbTogSW50LCBzb21ldGhpbmdQYXJhbTogU29tZXRoaW5nKT9cbiAgICBpbnRlcm5hbCB2YXIgcG9zdFNvbWV0aGluZ1N0cmluZ1BhcmFtSW50UGFyYW1Tb21ldGhpbmdQYXJhbVJlY2VpdmVkSW52b2NhdGlvbnM6IFsoc3RyaW5nUGFyYW06IFN0cmluZywgaW50UGFyYW06IEludCwgc29tZXRoaW5nUGFyYW06IFNvbWV0aGluZyldID0gW11cblxuICAgIGludGVybmFsIGZ1bmMgcG9zdFNvbWV0aGluZyhzdHJpbmdQYXJhbTogU3RyaW5nLCBpbnRQYXJhbTogSW50LCBzb21ldGhpbmdQYXJhbTogU29tZXRoaW5nKSBhc3luYyB0aHJvd3Mge1xuICAgICAgICBwb3N0U29tZXRoaW5nU3RyaW5nUGFyYW1JbnRQYXJhbVNvbWV0aGluZ1BhcmFtQ2FsbHNDb3VudCArPSAxXG4gICAgICAgIHBvc3RTb21ldGhpbmdTdHJpbmdQYXJhbUludFBhcmFtU29tZXRoaW5nUGFyYW1SZWNlaXZlZEFyZ3VtZW50cyA9IChzdHJpbmdQYXJhbTogc3RyaW5nUGFyYW0sIGludFBhcmFtOiBpbnRQYXJhbSwgc29tZXRoaW5nUGFyYW06IHNvbWV0aGluZ1BhcmFtKVxuICAgICAgICBwb3N0U29tZXRoaW5nU3RyaW5nUGFyYW1JbnRQYXJhbVNvbWV0aGluZ1BhcmFtUmVjZWl2ZWRJbnZvY2F0aW9ucy5hcHBlbmQoKHN0cmluZ1BhcmFtOiBzdHJpbmdQYXJhbSwgaW50UGFyYW06IGludFBhcmFtLCBzb21ldGhpbmdQYXJhbTogc29tZXRoaW5nUGFyYW0pKVxuICAgIH1cbn0iLCJ1cmwiOiIiLCJyZWdlbmVyYXRpb25Db3VudGVyIjowLCJmaWxlVVJMIjoiZmlsZTpcL1wvXC9Vc2Vyc1wvYm9jYXRlZHVcL2FkaWRhc1wvZGV2ZWxvcG1lbnRcL1NvdXJjZXJ5UmVzb3VyY2VzXC9Bc3luY0F1dG9TcHlpbmdTdHViXC9Bc3luY0F1dG9TcHlpbmdTdHViLnNvdXJjZXJ5dGVtcGxhdGUiLCJydW5Db25maWd1cmF0aW9uIjoic2VsZWN0aW9uIiwic2FtcGxlQ29kZSI6ImVudW0gU29tZUVudW0ge1xuICAgIGNhc2UgZmlyc3RDYXNlXG4gICAgY2FzZSBzZWNvbmRDYXNlXG59XG5cbnByb3RvY29sIFNvbWV0aGluZ1JlcG9zaXRvcnlJbnRlcmZhY2Uge1xuICAgIGluaXQoaW5wdXQ6IFN0cmluZylcbiAgICBmdW5jIGZldGNoU29tZXRoaW5nV2l0aElEKF8gaWQ6IFN0cmluZykgYXN5bmMgdGhyb3dzIC0+IFNvbWV0aGluZ1xuICAgIGZ1bmMgZmV0Y2hBcnJheU9mU29tZXRoaW5nKCkgYXN5bmMgdGhyb3dzIC0+IFtTb21ldGhpbmddXG4gICAgZnVuYyBmZXRjaEFycmF5T2ZTb21lRW51bSgpIGFzeW5jIHRocm93cyAtPiBbU29tZUVudW1dXG4gICAgZnVuYyBwb3N0U29tZXRoaW5nKHN0cmluZ1BhcmFtOiBTdHJpbmcsIGludFBhcmFtOiBJbnQsIHNvbWV0aGluZ1BhcmFtOiBTb21ldGhpbmcpIGFzeW5jIHRocm93c1xufSIsImlzTG9ja2VkIjpmYWxzZSwia2luZCI6InN0ZW5jaWwiLCJ0cmltV2hpdGVzcGFjZXMiOnRydWUsIm5hbWUiOiJBc3luY0F1dG9TcHlpbmdTdHViIiwiaW5zZXJ0aW9uTW9kZSI6ImVuZE9mRmlsZSJ9"}