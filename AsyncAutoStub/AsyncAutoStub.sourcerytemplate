{"version":3,"instance":"eyJpZCI6IjQ5RTFFODdELUFENDAtNDE3Ny1BOEFGLUE3NDBDNTMxNkE5MyIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBhIGBTdHViYCBiYXNlZCBvbiBhIGRlcGVuZGVuY3kgcHJvdG9jb2wsIG1vc3RseSBhcHBsaWNhYmxlIGZvciBkYXRhc291cmNlcyBsaWtlIHNlcnZpY2VzIGFuZCByZXBvc2l0b3JpZXMuXG5OT1RFOiBpdCBhc3N1bWVzIHRoYXQgYWxsIG1vZGVscyByZXR1cm5lZCBoYXZlIGEgYGZpeHR1cmVgIG1ldGhvZCBwcmV2aW91c2x5IGRlZmluZWQuIiwiY29udGVudCI6InslIG1hY3JvIGdldENsZWFuVHlwZU5hbWUgdHlwZU5hbWUgJX1cbiAgICB7JSBpZiB0eXBlTmFtZXxjb250YWluczogXCJJbnRlcmZhY2VcIiAlfVxuICAgICAgICB7eyB0eXBlTmFtZXxyZXBsYWNlOiBcIkludGVyZmFjZVwiLCBcIlwifX1cbiAgICB7JSBlbGlmIHR5cGVOYW1lfGNvbnRhaW5zOiBcIlByb3RvY29sXCIgJX1cbiAgICAgICAge3sgdHlwZU5hbWV8cmVwbGFjZTogXCJQcm90b2NvbFwiLCBcIlwifX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gcmVzb2x2ZVJldHVyblZhbHVlRm9yUmV0dXJuVHlwZSBtZXRob2QgJX1cbnslIHR5cGVkIG1ldGhvZCBhcyBNZXRob2QgJX1cbiAgICB7JSBzZXQgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZSAlfSBcbiAgICBbXG4gICAgICAgIFwiRGF0ZVwiLCBcIkRhdGFcIlxuICAgIF1cbiAgICB7JSBlbmRzZXQgJX1cbiAgICB7JSBpZiBtZXRob2QucmV0dXJuVHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyBtZXRob2QucmV0dXJuVHlwZS5jYXNlcy5maXJzdC5uYW1lIH19XG4gICAgeyUgZWxpZiBmb3VuZGF0aW9uVHlwZXNXaXRoTm9GaXh0dXJlfGNvbnRhaW5zOiBtZXRob2QucmV0dXJuVHlwZU5hbWUgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsc2UgJX1cbiAgICAgICAgeyUgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lfGNvbnRhaW5zOlwiW1wiIGFuZCBtZXRob2QucmV0dXJuVHlwZU5hbWV8Y29udGFpbnM6XCJdXCIgJX1cbiAgICAgICAgICAgIC5pbml0KClcbiAgICAgICAgeyUgZWxpZiBtZXRob2QucmV0dXJuVHlwZU5hbWV8Y29udGFpbnM6XCJVUkxcIiAlfVxuICAgICAgICAgICAgLmluaXQoc3RyaW5nOiBcInd3dy50ZXN0LmNvbVwiKS51bnNhZmVseVVud3JhcHBlZFxuICAgICAgICB7JSBlbHNlICV9XG4gICAgICAgICAgICAuZml4dHVyZSgpXG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgeyUgZW5kaWYgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIGZvciB0eXBlIGluIHR5cGVzLnByb3RvY29scyAlfXsjIFVzZSB0eXBlcy5pbXBsZW1lbnRpbmcuQXN5bmNBdXRvU3R1YiBpbnN0ZWFkIG9mIHR5cGVzLnByb3RvY29scyBpZiBkZWNpZGVkIHRvIGhhdmUgdGhpcyBwcm90b2NvbCAjfVxuXC9cLyBNQVJLOiAtIHt7IHR5cGUubmFtZSB9fVN0dWJcblxueyUgc2V0IGNsZWFuVHlwZU5hbWUgJX0geyUgY2FsbCBnZXRDbGVhblR5cGVOYW1lIHR5cGUubmFtZSAlfSAgeyUgZW5kc2V0ICV9XG57eyB0eXBlLmFjY2Vzc0xldmVsIH19IGZpbmFsIGNsYXNzIHt7IGNsZWFuVHlwZU5hbWV8cmVtb3ZlTmV3bGluZXMgfX1TdHViOiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gaW5pdCgpIHt9XG4gICAgeyUgZm9yIG1ldGhvZCBpbiB0eXBlLmFsbE1ldGhvZHMgJX1cblxuICAgIFwvXC8gTUFSSzogLSB7eyBtZXRob2Quc2hvcnROYW1lIH19XG5cbiAgICB7JSBpZiBtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZSAhPSBcIlZvaWRcIiAlfVxuICAgIHslIHNldCByZXR1cm5WYWx1ZSAlfSB7JSBjYWxsIHJlc29sdmVSZXR1cm5WYWx1ZUZvclJldHVyblR5cGUgbWV0aG9kICV9IHslIGVuZHNldCAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gdmFyIHt7IG1ldGhvZC5zaG9ydE5hbWUgfX1SZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDx7eyBtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZSB9fSwgRXJyb3I+ID0gLnN1Y2Nlc3Moe3sgcmV0dXJuVmFsdWV8cmVtb3ZlTmV3bGluZXMgfX0pXG4gICAgeyUgZWxzZSAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gdmFyIHt7IG1ldGhvZC5zaG9ydE5hbWUgfX1SZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxWb2lkLCBFcnJvcj4gPSAuc3VjY2VzcygoKSlcbiAgICB7JSBlbmRpZiAlfVxuICAgIHt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gZnVuYyB7eyBtZXRob2QubmFtZSB9fXt7ICcgYXN5bmMnIGlmIG1ldGhvZC5pc0FzeW5jIH19e3sgJyB0aHJvd3MnIGlmIG1ldGhvZC50aHJvd3MgfX0geyUgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUgIT0gXCJWb2lkXCIgJX0tPiB7eyBtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZSB9fSB7JSBlbmRpZiAlfXtcbiAgICAgICAgdHJ5IHt7IG1ldGhvZC5zaG9ydE5hbWUgfX1SZXN1bHRUb0JlUmV0dXJuZWQuZ2V0KClcbiAgICB9XG4gICAgeyUgZW5kZm9yICV9XG59XG57JSBlbmRmb3IgJX0iLCJ2ZXJzaW9uIjozLCJmYXZvcml0ZSI6dHJ1ZSwiYXV0aG9yIjoiRWR1YXJkbyBCb2NhdG8iLCJnZW5lcmF0ZWRDb2RlIjoiXC9cLyBNQVJLOiAtIFNvbWVTZXJ2aWNlSW50ZXJmYWNlU3R1YlxuXG5pbnRlcm5hbCBmaW5hbCBjbGFzcyBTb21lU2VydmljZVN0dWI6IFNvbWVTZXJ2aWNlSW50ZXJmYWNlIHtcbiAgICBpbnRlcm5hbCBpbml0KCkge31cblxuICAgIFwvXC8gTUFSSzogLSBpbml0XG5cbiAgICBpbnRlcm5hbCB2YXIgaW5pdFJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFNvbWVTZXJ2aWNlSW50ZXJmYWNlLCBFcnJvcj4gPSAuc3VjY2VzcyguZml4dHVyZSgpKVxuICAgIGludGVybmFsIGZ1bmMgaW5pdChzb21ldGhpbmc6IFN0cmluZykgLT4gU29tZVNlcnZpY2VJbnRlcmZhY2Uge1xuICAgICAgICB0cnkgaW5pdFJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBnZXRTb21ldGhpbmdcblxuICAgIGludGVybmFsIHZhciBnZXRTb21ldGhpbmdSZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxTb21ldGhpbmcsIEVycm9yPiA9IC5zdWNjZXNzKC5maXh0dXJlKCkpXG4gICAgaW50ZXJuYWwgZnVuYyBnZXRTb21ldGhpbmcoXyBpZDogU3RyaW5nKSBhc3luYyB0aHJvd3MgLT4gU29tZXRoaW5nIHtcbiAgICAgICAgdHJ5IGdldFNvbWV0aGluZ1Jlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBnZXRFbnVtXG5cbiAgICBpbnRlcm5hbCB2YXIgZ2V0RW51bVJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PE15RW51bSwgRXJyb3I+ID0gLnN1Y2Nlc3MoLmZpcnN0Q2FzZSlcbiAgICBpbnRlcm5hbCBmdW5jIGdldEVudW0oKSBhc3luYyB0aHJvd3MgLT4gTXlFbnVtIHtcbiAgICAgICAgdHJ5IGdldEVudW1SZXN1bHRUb0JlUmV0dXJuZWQuZ2V0KClcbiAgICB9XG5cbiAgICBcL1wvIE1BUks6IC0gZ2V0RGF0ZVxuXG4gICAgaW50ZXJuYWwgdmFyIGdldERhdGVSZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxEYXRlLCBFcnJvcj4gPSAuc3VjY2VzcyguaW5pdCgpKVxuICAgIGludGVybmFsIGZ1bmMgZ2V0RGF0ZSgpIGFzeW5jIHRocm93cyAtPiBEYXRlIHtcbiAgICAgICAgdHJ5IGdldERhdGVSZXN1bHRUb0JlUmV0dXJuZWQuZ2V0KClcbiAgICB9XG5cbiAgICBcL1wvIE1BUks6IC0gZ2V0RGF0YVxuXG4gICAgaW50ZXJuYWwgdmFyIGdldERhdGFSZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxEYXRhLCBFcnJvcj4gPSAuc3VjY2VzcyguaW5pdCgpKVxuICAgIGludGVybmFsIGZ1bmMgZ2V0RGF0YSgpIGFzeW5jIHRocm93cyAtPiBEYXRhIHtcbiAgICAgICAgdHJ5IGdldERhdGFSZXN1bHRUb0JlUmV0dXJuZWQuZ2V0KClcbiAgICB9XG5cbiAgICBcL1wvIE1BUks6IC0gZ2V0VVJMXG5cbiAgICBpbnRlcm5hbCB2YXIgZ2V0VVJMUmVzdWx0VG9CZVJldHVybmVkOiBSZXN1bHQ8VVJMLCBFcnJvcj4gPSAuc3VjY2VzcyguaW5pdChzdHJpbmc6XCJ3d3cudGVzdC5jb21cIikudW5zYWZlbHlVbndyYXBwZWQpXG4gICAgaW50ZXJuYWwgZnVuYyBnZXRVUkwoKSBhc3luYyB0aHJvd3MgLT4gVVJMIHtcbiAgICAgICAgdHJ5IGdldFVSTFJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBnZXRBcnJheVxuXG4gICAgaW50ZXJuYWwgdmFyIGdldEFycmF5UmVzdWx0VG9CZVJldHVybmVkOiBSZXN1bHQ8W1N0cmluZ10sIEVycm9yPiA9IC5zdWNjZXNzKC5pbml0KCkpXG4gICAgaW50ZXJuYWwgZnVuYyBnZXRBcnJheSgpIGFzeW5jIHRocm93cyAtPiBbU3RyaW5nXSB7XG4gICAgICAgIHRyeSBnZXRBcnJheVJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBnZXREaWN0aW9uYXJ5XG5cbiAgICBpbnRlcm5hbCB2YXIgZ2V0RGljdGlvbmFyeVJlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFtTdHJpbmc6IFN0cmluZ10sIEVycm9yPiA9IC5zdWNjZXNzKC5pbml0KCkpXG4gICAgaW50ZXJuYWwgZnVuYyBnZXREaWN0aW9uYXJ5KCkgYXN5bmMgdGhyb3dzIC0+IFtTdHJpbmc6IFN0cmluZ10ge1xuICAgICAgICB0cnkgZ2V0RGljdGlvbmFyeVJlc3VsdFRvQmVSZXR1cm5lZC5nZXQoKVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBwb3N0U29tZXRoaW5nXG5cbiAgICBpbnRlcm5hbCB2YXIgcG9zdFNvbWV0aGluZ1Jlc3VsdFRvQmVSZXR1cm5lZDogUmVzdWx0PFZvaWQsIEVycm9yPiA9IC5zdWNjZXNzKCgpKVxuICAgIGludGVybmFsIGZ1bmMgcG9zdFNvbWV0aGluZygpIGFzeW5jIHRocm93cyB7XG4gICAgICAgIHRyeSBwb3N0U29tZXRoaW5nUmVzdWx0VG9CZVJldHVybmVkLmdldCgpXG4gICAgfVxuXG4gICAgXC9cLyBNQVJLOiAtIHBvc3ROb1Rocm93XG5cbiAgICBpbnRlcm5hbCB2YXIgcG9zdE5vVGhyb3dSZXN1bHRUb0JlUmV0dXJuZWQ6IFJlc3VsdDxWb2lkLCBFcnJvcj4gPSAuc3VjY2VzcygoKSlcbiAgICBpbnRlcm5hbCBmdW5jIHBvc3ROb1Rocm93KCkgYXN5bmMge1xuICAgICAgICB0cnkgcG9zdE5vVGhyb3dSZXN1bHRUb0JlUmV0dXJuZWQuZ2V0KClcbiAgICB9XG59IiwidXJsIjoiIiwicmVnZW5lcmF0aW9uQ291bnRlciI6MSwiZmlsZVVSTCI6ImZpbGU6XC9cL1wvVXNlcnNcL2JvY2F0ZWR1XC9hZGlkYXNcL2RldmVsb3BtZW50XC9Tb3VyY2VyeVJlc291cmNlc1wvQXN5bmNBdXRvU3R1YlwvQXN5bmNBdXRvU3R1Yi5zb3VyY2VyeXRlbXBsYXRlIiwicnVuQ29uZmlndXJhdGlvbiI6InNlbGVjdGlvbiIsInNhbXBsZUNvZGUiOiJlbnVtIE15RW51bSB7XG4gICAgY2FzZSBmaXJzdENhc2VcbiAgICBjYXNlIHNlY29uZENhc2Vcbn1cblxucHJvdG9jb2wgU29tZVNlcnZpY2VJbnRlcmZhY2Uge1xuICAgIGluaXQoc29tZXRoaW5nOiBTdHJpbmcpXG4gICAgZnVuYyBnZXRTb21ldGhpbmcoXyBpZDogU3RyaW5nKSBhc3luYyB0aHJvd3MgLT4gU29tZXRoaW5nXG4gICAgZnVuYyBnZXRFbnVtKCkgYXN5bmMgdGhyb3dzIC0+IE15RW51bVxuICAgIGZ1bmMgZ2V0RGF0ZSgpIGFzeW5jIHRocm93cyAtPiBEYXRlXG4gICAgZnVuYyBnZXREYXRhKCkgYXN5bmMgdGhyb3dzIC0+IERhdGFcbiAgICBmdW5jIGdldFVSTCgpIGFzeW5jIHRocm93cyAtPiBVUkxcbiAgICBmdW5jIGdldEFycmF5KCkgYXN5bmMgdGhyb3dzIC0+IFtTdHJpbmddXG4gICAgZnVuYyBnZXREaWN0aW9uYXJ5KCkgYXN5bmMgdGhyb3dzIC0+IFtTdHJpbmc6IFN0cmluZ11cbiAgICBmdW5jIHBvc3RTb21ldGhpbmcoKSBhc3luYyB0aHJvd3NcbiAgICBmdW5jIHBvc3ROb1Rocm93KCkgYXN5bmNcbn0iLCJpc0xvY2tlZCI6ZmFsc2UsImtpbmQiOiJzdGVuY2lsIiwidHJpbVdoaXRlc3BhY2VzIjp0cnVlLCJuYW1lIjoiQXN5bmNBdXRvU3R1YiIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUifQ=="}