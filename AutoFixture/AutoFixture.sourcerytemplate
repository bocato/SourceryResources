{"version":3,"instance":"eyJpZCI6IkU5OTdBNzcyLTRBMjYtNDMwQS04MTYzLTZFNkVGRkUwNTRFOCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBzcGVjaWFsIGluaXRpYWxpemVyIGBmaXh0dXJlYCB0byBzaW1wbGlmeSB0ZXN0aW5nIHdoZW4gbW9ja2luZyBvYmplY3RzLiIsImNvbnRlbnQiOiJ7JSBtYWNybyBpc0NvbGxlY3Rpb25UeXBlIHR5cGUgJX1cbiAgICB7JSBpZiB0eXBlLm5hbWV8Y29udGFpbnM6XCJbXCIgYW5kIHR5cGUubmFtZXxjb250YWluczpcIl1cIiAlfVxuICAgICAgICB7JSBpZiB0eXBlLm5hbWV8Y29udGFpbnM6XCI6XCIgJX0geyMgZGV0ZWN0ZWQgZGljdGlvbmFyeSBbPGtleVR5cGU+Ojx2YWx1ZVR5cGU+XSAgI31cbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgeyUgZWxzZSAlfXsjIGRldGVjdGVkIGFycmF5IFs8dmFsdWVUeXBlPl0gICN9XG4gICAgICAgICAgICB0cnVlIFxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVsc2UgJX1cbiAgICAgICAgZmFsc2VcbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgbWFjcm8gZGVmYXVsdFZhbHVlRm9yVHlwZSB2YXJpYWJsZSAlfVxuICAgIHslIHNldCBmb3VuZGF0aW9uVHlwZXNXaXRoTm9GaXh0dXJlICV9IFxuICAgIFtcbiAgICAgICAgXCJEYXRlXCIsIFwiRGF0YVwiLCBcIlVSTFwiXG4gICAgXVxuICAgIHslIGVuZHNldCAlfVxuICAgIHslIHNldCBjb2xsZWN0aW9uVHlwZUZvdW5kICV9IHslIGNhbGwgaXNDb2xsZWN0aW9uVHlwZSB2YXJpYWJsZS50eXBlICV9IHslIGVuZHNldCAlfVxuICAgIHslIGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJTdHJpbmdcIiAlfVxuICAgICAgICBcInt7IHZhcmlhYmxlLm5hbWUgfX1cIlxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkNoYXJhY3RlclwiICV9XG4gICAgICAgIFwiXCJcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJJbnRcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRG91YmxlXCIgb3IgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkZsb2F0XCIgb3IgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIlVJbnRcIiAlfVxuICAgICAgICAwXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiQm9vbFwiICV9XG4gICAgICAgIGZhbHNlXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRGF0ZVwiICV9XG4gICAgICAgIC5kaXN0YW50RnV0dXJlXG4gICAgeyUgZWxpZiBmb3VuZGF0aW9uVHlwZXNXaXRoTm9GaXh0dXJlfGNvbnRhaW5zOiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lICV9XG4gICAgICAgIC5pbml0KClcbiAgICB7JSBlbGlmIGNvbGxlY3Rpb25UeXBlRm91bmQgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyB2YXJpYWJsZS50eXBlLmNhc2VzLmZpcnN0Lm5hbWUgfX1cbiAgICB7JSBlbHNlICV9XG4gICAgICAgIC5maXh0dXJlKClcbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMuc3RydWN0cyAlfXsjIFVzZSB0eXBlcy5pbXBsZW1lbnRpbmcuQXV0b0ZpeHR1cmUgaW5zdGVhZCBvZiB0eXBlcy5zdHJ1Y3RzIGlmIGRlY2lkZWQgdG8gaGF2ZSB0aGlzIHByb3RvY29sICN9XG4jaWYgREVCVUdcbmV4dGVuc2lvbiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHN0YXRpYyBmdW5jIGZpeHR1cmUoXG4gICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICB7JSBzZXQgZGVmYXVsdFZhbHVlICV9IHslIGNhbGwgZGVmYXVsdFZhbHVlRm9yVHlwZSB2YXJpYWJsZSAlfSB7JSBlbmRzZXQgJX1cbiAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUudHlwZU5hbWUubmFtZSB9fSA9IHt7IGRlZmF1bHRWYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUubmFtZSB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgKVxuICAgIH1cbn1cbiNlbmRpZlxueyUgZW5kZm9yICV9IiwidmVyc2lvbiI6MywiZmF2b3JpdGUiOnRydWUsImF1dGhvciI6IkVkdWFyZG8gQm9jYXRvIiwiZ2VuZXJhdGVkQ29kZSI6IiNpZiBERUJVR1xuZXh0ZW5zaW9uIE15TW9kZWwge1xuICAgIHN0YXRpYyBmdW5jIGZpeHR1cmUoXG4gICAgICAgIGFuSW50OiBJbnQgPSAwLCBcbiAgICAgICAgYW5VSW50OiBVSW50ID0gMCwgXG4gICAgICAgIGFGbG9hdDogRmxvYXQgPSAwLCBcbiAgICAgICAgYURvdWJsZTogRG91YmxlID0gMCwgXG4gICAgICAgIGFCb29sOiBCb29sID0gZmFsc2UsIFxuICAgICAgICBhU3RyaW5nOiBTdHJpbmcgPSBcImFTdHJpbmdcIiwgXG4gICAgICAgIGFDaGFyYWN0ZXI6IENoYXJhY3RlciA9IFwiXCIsIFxuICAgICAgICBhbkFycmF5OiBBcnJheSA9IC5pbml0KCksIFxuICAgICAgICBhbkFycmF5MjogW0ludF0gPSAuaW5pdCgpLCBcbiAgICAgICAgYURpY3Rpb25hcnk6IERpY3Rpb25hcnkgPSAuaW5pdCgpLCBcbiAgICAgICAgYURpY3Rpb25hcnkyOiBbU3RyaW5nOiBTdHJpbmddID0gLmluaXQoKSwgXG4gICAgICAgIGFTZXQ6IFNldCA9IC5pbml0KCksIFxuICAgICAgICBhRGF0ZTogRGF0ZSA9IC5kaXN0YW50RnV0dXJlLCBcbiAgICAgICAgYURhdGE6IERhdGEgPSAuaW5pdCgpLCBcbiAgICAgICAgYW5VUkw6IFVSTCA9IC5pbml0KCksIFxuICAgICAgICBhU29tZXRoaW5nOiBTb21ldGhpbmcgPSAuaW5pdCgpLCBcbiAgICAgICAgYW5FbnVtOiBNeUVudW0gPSAuaW5pdCgpXG4gICAgKSAtPiBTZWxmIHtcbiAgICAgICAgcmV0dXJuIC5pbml0KFxuICAgICAgICAgICAgYW5JbnQ6IGFuSW50LCBcbiAgICAgICAgICAgIGFuVUludDogYW5VSW50LCBcbiAgICAgICAgICAgIGFGbG9hdDogYUZsb2F0LCBcbiAgICAgICAgICAgIGFEb3VibGU6IGFEb3VibGUsIFxuICAgICAgICAgICAgYUJvb2w6IGFCb29sLCBcbiAgICAgICAgICAgIGFTdHJpbmc6IGFTdHJpbmcsIFxuICAgICAgICAgICAgYUNoYXJhY3RlcjogYUNoYXJhY3RlciwgXG4gICAgICAgICAgICBhbkFycmF5OiBhbkFycmF5LCBcbiAgICAgICAgICAgIGFuQXJyYXkyOiBhbkFycmF5MiwgXG4gICAgICAgICAgICBhRGljdGlvbmFyeTogYURpY3Rpb25hcnksIFxuICAgICAgICAgICAgYURpY3Rpb25hcnkyOiBhRGljdGlvbmFyeTIsIFxuICAgICAgICAgICAgYVNldDogYVNldCwgXG4gICAgICAgICAgICBhRGF0ZTogYURhdGUsIFxuICAgICAgICAgICAgYURhdGE6IGFEYXRhLCBcbiAgICAgICAgICAgIGFuVVJMOiBhblVSTCwgXG4gICAgICAgICAgICBhU29tZXRoaW5nOiBhU29tZXRoaW5nLCBcbiAgICAgICAgICAgIGFuRW51bTogYW5FbnVtXG4gICAgICAgIClcbiAgICB9XG59XG4jZW5kaWYiLCJ1cmwiOiIiLCJyZWdlbmVyYXRpb25Db3VudGVyIjoxMTMsImZpbGVVUkwiOiJmaWxlOlwvXC9cL1VzZXJzXC9ib2NhdGVkdVwvRGVza3RvcFwvQXV0b0ZpeHR1cmUuc291cmNlcnl0ZW1wbGF0ZSIsInJ1bkNvbmZpZ3VyYXRpb24iOiJzZWxlY3Rpb24iLCJzYW1wbGVDb2RlIjoiZW51bSBNeUVudW0ge1xuICAgIGNhc2UgZmlyc3RDYXNlXG4gICAgY2FzZSBzZWNvbmRDYXNlXG59XG5cbnN0cnVjdCBNeU1vZGVsOiBBdXRvRml4dHVyZSB7XG4gICAgbGV0IGFuSW50OiBJbnRcbiAgICBsZXQgYW5VSW50OiBVSW50XG4gICAgbGV0IGFGbG9hdDogRmxvYXRcbiAgICBsZXQgYURvdWJsZTogRG91YmxlXG4gICAgbGV0IGFCb29sOiBCb29sXG4gICAgbGV0IGFTdHJpbmc6IFN0cmluZ1xuICAgIGxldCBhQ2hhcmFjdGVyOiBDaGFyYWN0ZXJcbiAgICBsZXQgYW5BcnJheTogQXJyYXlcbiAgICBsZXQgYW5BcnJheTI6IFtJbnRdXG4gICAgbGV0IGFEaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5XG4gICAgbGV0IGFEaWN0aW9uYXJ5MjogW1N0cmluZzogU3RyaW5nXVxuICAgIGxldCBhU2V0OiBTZXRcbiAgICBsZXQgYURhdGU6IERhdGVcbiAgICBsZXQgYURhdGE6IERhdGFcbiAgICBsZXQgYW5VUkw6IFVSTFxuICAgIGxldCBhU29tZXRoaW5nOiBTb21ldGhpbmdcbiAgICBsZXQgYW5FbnVtOiBNeUVudW1cbn0iLCJpc0xvY2tlZCI6ZmFsc2UsImtpbmQiOiJzdGVuY2lsIiwidHJpbVdoaXRlc3BhY2VzIjp0cnVlLCJuYW1lIjoiQXV0b0ZpeHR1cmUiLCJpbnNlcnRpb25Nb2RlIjoiZW5kT2ZGaWxlIn0="}