{"version":3,"instance":"eyJpZCI6IkU5OTdBNzcyLTRBMjYtNDMwQS04MTYzLTZFNkVGRkUwNTRFOCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBzcGVjaWFsIGluaXRpYWxpemVyIGBmaXh0dXJlYCB0byBzaW1wbGlmeSB0ZXN0aW5nIHdoZW4gbW9ja2luZyBvYmplY3RzLiIsImNvbnRlbnQiOiJ7JSBtYWNybyBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCIsIFwiVVJMXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIlN0cmluZ1wiICV9XG4gICAgICAgIFwie3sgdmFyaWFibGUubmFtZSB9fVwiXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiQ2hhcmFjdGVyXCIgJX1cbiAgICAgICAgXCJcIlxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkludFwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEb3VibGVcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRmxvYXRcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiVUludFwiICV9XG4gICAgICAgIDBcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJCb29sXCIgJX1cbiAgICAgICAgZmFsc2VcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEYXRlXCIgJX1cbiAgICAgICAgLmRpc3RhbnRGdXR1cmVcbiAgICB7JSBlbGlmIGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmV8Y29udGFpbnM6IHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyB2YXJpYWJsZS50eXBlLmNhc2VzLmZpcnN0Lm5hbWUgfX1cbiAgICB7JSBlbHNlICV9XG4gICAgICAgIHslIGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWV8Y29udGFpbnM6XCJbXCIgYW5kIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWV8Y29udGFpbnM6XCJdXCIgJX1cbiAgICAgICAgICAgIC5pbml0KClcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICAgICAgLmZpeHR1cmUoKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBmb3IgdHlwZSBpbiB0eXBlcy5zdHJ1Y3RzICV9eyMgVXNlIHR5cGVzLmltcGxlbWVudGluZy5BdXRvRml4dHVyZSBpbnN0ZWFkIG9mIHR5cGVzLnN0cnVjdHMgaWYgZGVjaWRlZCB0byBoYXZlIHRoaXMgcHJvdG9jb2wgI31cbiNpZiBERUJVR1xuZXh0ZW5zaW9uIHt7IHR5cGUubmFtZSB9fSB7XG4gICAgc3RhdGljIGZ1bmMgZml4dHVyZShcbiAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgIHslIHNldCBkZWZhdWx0VmFsdWUgJX0geyUgY2FsbCBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9IHslIGVuZHNldCAlfVxuICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS50eXBlTmFtZS5uYW1lIH19ID0ge3sgZGVmYXVsdFZhbHVlfHJlbW92ZU5ld2xpbmVzIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG4gICAgKSAtPiBTZWxmIHtcbiAgICAgICAgcmV0dXJuIC5pbml0KFxuICAgICAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS5uYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgICAgIHslIGVuZGZvciAlfVxuICAgICAgICApXG4gICAgfVxufVxuI2VuZGlmXG57JSBlbmRmb3IgJX0iLCJ2ZXJzaW9uIjozLCJmYXZvcml0ZSI6dHJ1ZSwiYXV0aG9yIjoiRWR1YXJkbyBCb2NhdG8iLCJnZW5lcmF0ZWRDb2RlIjoiI2lmIERFQlVHXG5leHRlbnNpb24gTXlNb2RlbCB7XG4gICAgc3RhdGljIGZ1bmMgZml4dHVyZShcbiAgICAgICAgYW5JbnQ6IEludCA9IDAsIFxuICAgICAgICBhblVJbnQ6IFVJbnQgPSAwLCBcbiAgICAgICAgYUZsb2F0OiBGbG9hdCA9IDAsIFxuICAgICAgICBhRG91YmxlOiBEb3VibGUgPSAwLCBcbiAgICAgICAgYUJvb2w6IEJvb2wgPSBmYWxzZSwgXG4gICAgICAgIGFTdHJpbmc6IFN0cmluZyA9IFwiYVN0cmluZ1wiLCBcbiAgICAgICAgYUNoYXJhY3RlcjogQ2hhcmFjdGVyID0gXCJcIiwgXG4gICAgICAgIGFuQXJyYXk6IEFycmF5ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFuQXJyYXkyOiBbSW50XSA9IC5pbml0KCksIFxuICAgICAgICBhRGljdGlvbmFyeTogRGljdGlvbmFyeSA9IC5maXh0dXJlKCksIFxuICAgICAgICBhRGljdGlvbmFyeTI6IFtTdHJpbmc6IFN0cmluZ10gPSAuaW5pdCgpLCBcbiAgICAgICAgYVNldDogU2V0ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFEYXRlOiBEYXRlID0gLmRpc3RhbnRGdXR1cmUsIFxuICAgICAgICBhRGF0YTogRGF0YSA9IC5pbml0KCksIFxuICAgICAgICBhblVSTDogVVJMID0gLmluaXQoKSwgXG4gICAgICAgIGFTb21ldGhpbmc6IFNvbWV0aGluZyA9IC5maXh0dXJlKCksIFxuICAgICAgICBhbkVudW06IE15RW51bSA9IC5maXJzdENhc2VcbiAgICApIC0+IFNlbGYge1xuICAgICAgICByZXR1cm4gLmluaXQoXG4gICAgICAgICAgICBhbkludDogYW5JbnQsIFxuICAgICAgICAgICAgYW5VSW50OiBhblVJbnQsIFxuICAgICAgICAgICAgYUZsb2F0OiBhRmxvYXQsIFxuICAgICAgICAgICAgYURvdWJsZTogYURvdWJsZSwgXG4gICAgICAgICAgICBhQm9vbDogYUJvb2wsIFxuICAgICAgICAgICAgYVN0cmluZzogYVN0cmluZywgXG4gICAgICAgICAgICBhQ2hhcmFjdGVyOiBhQ2hhcmFjdGVyLCBcbiAgICAgICAgICAgIGFuQXJyYXk6IGFuQXJyYXksIFxuICAgICAgICAgICAgYW5BcnJheTI6IGFuQXJyYXkyLCBcbiAgICAgICAgICAgIGFEaWN0aW9uYXJ5OiBhRGljdGlvbmFyeSwgXG4gICAgICAgICAgICBhRGljdGlvbmFyeTI6IGFEaWN0aW9uYXJ5MiwgXG4gICAgICAgICAgICBhU2V0OiBhU2V0LCBcbiAgICAgICAgICAgIGFEYXRlOiBhRGF0ZSwgXG4gICAgICAgICAgICBhRGF0YTogYURhdGEsIFxuICAgICAgICAgICAgYW5VUkw6IGFuVVJMLCBcbiAgICAgICAgICAgIGFTb21ldGhpbmc6IGFTb21ldGhpbmcsIFxuICAgICAgICAgICAgYW5FbnVtOiBhbkVudW1cbiAgICAgICAgKVxuICAgIH1cbn1cbiNlbmRpZiIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjIwLCJmaWxlVVJMIjoiZmlsZTpcL1wvXC9Vc2Vyc1wvYm9jYXRlZHVcL0Rlc2t0b3BcL0F1dG9GaXh0dXJlLnNvdXJjZXJ5dGVtcGxhdGUiLCJydW5Db25maWd1cmF0aW9uIjoic2VsZWN0aW9uIiwic2FtcGxlQ29kZSI6ImVudW0gTXlFbnVtIHtcbiAgICBjYXNlIGZpcnN0Q2FzZVxuICAgIGNhc2Ugc2Vjb25kQ2FzZVxufVxuXG5zdHJ1Y3QgTXlNb2RlbDogQXV0b0ZpeHR1cmUge1xuICAgIGxldCBhbkludDogSW50XG4gICAgbGV0IGFuVUludDogVUludFxuICAgIGxldCBhRmxvYXQ6IEZsb2F0XG4gICAgbGV0IGFEb3VibGU6IERvdWJsZVxuICAgIGxldCBhQm9vbDogQm9vbFxuICAgIGxldCBhU3RyaW5nOiBTdHJpbmdcbiAgICBsZXQgYUNoYXJhY3RlcjogQ2hhcmFjdGVyXG4gICAgbGV0IGFuQXJyYXk6IEFycmF5XG4gICAgbGV0IGFuQXJyYXkyOiBbSW50XVxuICAgIGxldCBhRGljdGlvbmFyeTogRGljdGlvbmFyeVxuICAgIGxldCBhRGljdGlvbmFyeTI6IFtTdHJpbmc6IFN0cmluZ11cbiAgICBsZXQgYVNldDogU2V0XG4gICAgbGV0IGFEYXRlOiBEYXRlXG4gICAgbGV0IGFEYXRhOiBEYXRhXG4gICAgbGV0IGFuVVJMOiBVUkxcbiAgICBsZXQgYVNvbWV0aGluZzogU29tZXRoaW5nXG4gICAgbGV0IGFuRW51bTogTXlFbnVtXG59IiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IkF1dG9GaXh0dXJlIiwiaW5zZXJ0aW9uTW9kZSI6ImVuZE9mRmlsZSJ9"}