{"instance":"eyJkZXNjcmlwdGlvbiI6IkNyZWF0ZXMgc3BlY2lhbCBpbml0aWFsaXplciBgZml4dHVyZWAgdG8gc2ltcGxpZnkgdGVzdGluZyB3aGVuIG1vY2tpbmcgb2JqZWN0cy4iLCJydW5Db25maWd1cmF0aW9uIjoic2VsZWN0aW9uIiwiYXV0aG9yIjoiRWR1YXJkbyBCb2NhdG8iLCJpc0xvY2tlZCI6ZmFsc2UsImtpbmQiOiJzdGVuY2lsIiwidmVyc2lvbiI6MywicmVnZW5lcmF0aW9uQ291bnRlciI6MCwiY29udGVudCI6InslIG1hY3JvIGRlZmF1bHRWYWx1ZUZvclR5cGUgdmFyaWFibGUgJX1cbiAgICB7JSBzZXQgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZSAlfSBcbiAgICBbXG4gICAgICAgIFwiRGF0ZVwiLCBcIkRhdGFcIiwgXCJVUkxcIlxuICAgIF1cbiAgICB7JSBlbmRzZXQgJX1cbiAgICB7JSBpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiU3RyaW5nXCIgJX1cbiAgICAgICAgXCJ7eyB2YXJpYWJsZS5uYW1lIH19XCJcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJDaGFyYWN0ZXJcIiAlfVxuICAgICAgICBcIlwiXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiSW50XCIgb3IgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkRvdWJsZVwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJGbG9hdFwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJVSW50XCIgJX1cbiAgICAgICAgMFxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkJvb2xcIiAlfVxuICAgICAgICBmYWxzZVxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkRhdGVcIiAlfVxuICAgICAgICAuZGlzdGFudEZ1dHVyZVxuICAgIHslIGVsaWYgZm91bmRhdGlvblR5cGVzV2l0aE5vRml4dHVyZXxjb250YWluczogdmFyaWFibGUudHlwZU5hbWUubmFtZSAlfVxuICAgICAgICAuaW5pdCgpXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlLmtpbmQgPT0gXCJlbnVtXCIgJX1cbiAgICAgICAgLnt7IHZhcmlhYmxlLnR5cGUuY2FzZXMuZmlyc3QubmFtZSB9fVxuICAgIHslIGVsc2UgJX1cbiAgICAgICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZXxjb250YWluczpcIltcIiBhbmQgdmFyaWFibGUudHlwZU5hbWUubmFtZXxjb250YWluczpcIl1cIiAlfVxuICAgICAgICAgICAgLmluaXQoKVxuICAgICAgICB7JSBlbHNlICV9XG4gICAgICAgICAgICAuZml4dHVyZSgpXG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgeyUgZW5kaWYgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIGZvciB0eXBlIGluIHR5cGVzLnN0cnVjdHMgJX17IyBVc2UgdHlwZXMuaW1wbGVtZW50aW5nLkF1dG9GaXh0dXJlIGluc3RlYWQgb2YgdHlwZXMuc3RydWN0cyBpZiBkZWNpZGVkIHRvIGhhdmUgdGhpcyBwcm90b2NvbCAjfVxuZXh0ZW5zaW9uIHt7IHR5cGUubmFtZSB9fSB7XG4gICAgc3RhdGljIGZ1bmMgZml4dHVyZShcbiAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgIHslIHNldCBkZWZhdWx0VmFsdWUgJX0geyUgY2FsbCBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9IHslIGVuZHNldCAlfVxuICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS50eXBlTmFtZS5uYW1lIH19ID0ge3sgZGVmYXVsdFZhbHVlfHJlbW92ZU5ld2xpbmVzIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG4gICAgKSAtPiBTZWxmIHtcbiAgICAgICAgcmV0dXJuIC5pbml0KFxuICAgICAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS5uYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgICAgIHslIGVuZGZvciAlfVxuICAgICAgICApXG4gICAgfVxufVxueyUgZW5kZm9yICV9IiwiZmF2b3JpdGUiOnRydWUsInVybCI6IiIsImlkIjoiMTFENTNDMDUtRDIzRS00QzA0LTk2OEMtRDk1NDM4NTgyRTgyIiwiZ2VuZXJhdGVkQ29kZSI6ImV4dGVuc2lvbiBNeU1vZGVsIHtcbiAgICBzdGF0aWMgZnVuYyBmaXh0dXJlKFxuICAgICAgICBhbkludDogSW50ID0gMCwgXG4gICAgICAgIGFuVUludDogVUludCA9IDAsIFxuICAgICAgICBhRmxvYXQ6IEZsb2F0ID0gMCwgXG4gICAgICAgIGFEb3VibGU6IERvdWJsZSA9IDAsIFxuICAgICAgICBhQm9vbDogQm9vbCA9IGZhbHNlLCBcbiAgICAgICAgYVN0cmluZzogU3RyaW5nID0gXCJhU3RyaW5nXCIsIFxuICAgICAgICBhQ2hhcmFjdGVyOiBDaGFyYWN0ZXIgPSBcIlwiLCBcbiAgICAgICAgYW5BcnJheTogQXJyYXkgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYW5BcnJheTI6IFtJbnRdID0gLmluaXQoKSwgXG4gICAgICAgIGFEaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFEaWN0aW9uYXJ5MjogW1N0cmluZzogU3RyaW5nXSA9IC5pbml0KCksIFxuICAgICAgICBhU2V0OiBTZXQgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYURhdGU6IERhdGUgPSAuZGlzdGFudEZ1dHVyZSwgXG4gICAgICAgIGFEYXRhOiBEYXRhID0gLmluaXQoKSwgXG4gICAgICAgIGFuVVJMOiBVUkwgPSAuaW5pdCgpLCBcbiAgICAgICAgYVNvbWV0aGluZzogU29tZXRoaW5nID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFuRW51bTogTXlFbnVtID0gLmZpcnN0Q2FzZVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIGFuSW50OiBhbkludCwgXG4gICAgICAgICAgICBhblVJbnQ6IGFuVUludCwgXG4gICAgICAgICAgICBhRmxvYXQ6IGFGbG9hdCwgXG4gICAgICAgICAgICBhRG91YmxlOiBhRG91YmxlLCBcbiAgICAgICAgICAgIGFCb29sOiBhQm9vbCwgXG4gICAgICAgICAgICBhU3RyaW5nOiBhU3RyaW5nLCBcbiAgICAgICAgICAgIGFDaGFyYWN0ZXI6IGFDaGFyYWN0ZXIsIFxuICAgICAgICAgICAgYW5BcnJheTogYW5BcnJheSwgXG4gICAgICAgICAgICBhbkFycmF5MjogYW5BcnJheTIsIFxuICAgICAgICAgICAgYURpY3Rpb25hcnk6IGFEaWN0aW9uYXJ5LCBcbiAgICAgICAgICAgIGFEaWN0aW9uYXJ5MjogYURpY3Rpb25hcnkyLCBcbiAgICAgICAgICAgIGFTZXQ6IGFTZXQsIFxuICAgICAgICAgICAgYURhdGU6IGFEYXRlLCBcbiAgICAgICAgICAgIGFEYXRhOiBhRGF0YSwgXG4gICAgICAgICAgICBhblVSTDogYW5VUkwsIFxuICAgICAgICAgICAgYVNvbWV0aGluZzogYVNvbWV0aGluZywgXG4gICAgICAgICAgICBhbkVudW06IGFuRW51bVxuICAgICAgICApXG4gICAgfVxufSIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwiaW5zZXJ0aW9uTW9kZSI6ImVuZE9mRmlsZSIsIm5hbWUiOiJBdXRvRml4dHVyZSIsInNhbXBsZUNvZGUiOiJlbnVtIE15RW51bSB7XG4gICAgY2FzZSBmaXJzdENhc2VcbiAgICBjYXNlIHNlY29uZENhc2Vcbn1cblxuc3RydWN0IE15TW9kZWw6IEF1dG9GaXh0dXJlIHtcbiAgICBsZXQgYW5JbnQ6IEludFxuICAgIGxldCBhblVJbnQ6IFVJbnRcbiAgICBsZXQgYUZsb2F0OiBGbG9hdFxuICAgIGxldCBhRG91YmxlOiBEb3VibGVcbiAgICBsZXQgYUJvb2w6IEJvb2xcbiAgICBsZXQgYVN0cmluZzogU3RyaW5nXG4gICAgbGV0IGFDaGFyYWN0ZXI6IENoYXJhY3RlclxuICAgIGxldCBhbkFycmF5OiBBcnJheVxuICAgIGxldCBhbkFycmF5MjogW0ludF1cbiAgICBsZXQgYURpY3Rpb25hcnk6IERpY3Rpb25hcnlcbiAgICBsZXQgYURpY3Rpb25hcnkyOiBbU3RyaW5nOiBTdHJpbmddXG4gICAgbGV0IGFTZXQ6IFNldFxuICAgIGxldCBhRGF0ZTogRGF0ZVxuICAgIGxldCBhRGF0YTogRGF0YVxuICAgIGxldCBhblVSTDogVVJMXG4gICAgbGV0IGFTb21ldGhpbmc6IFNvbWV0aGluZ1xuICAgIGxldCBhbkVudW06IE15RW51bVxufSJ9","version":3}