{"version":3,"instance":"eyJpZCI6IkIwMUM0NjlELTlGQjMtNEQ3RS1CRkM2LTIxMkY2MzMyNEMxMCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBzcGVjaWFsIGluaXRpYWxpemVyIGBmaXh0dXJlYCB0byBzaW1wbGlmeSB0ZXN0aW5nIHdoZW4gbW9ja2luZyBvYmplY3RzLiIsImNvbnRlbnQiOiJ7JSBtYWNybyBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIlN0cmluZ1wiICV9XG4gICAgICAgIFwie3sgdmFyaWFibGUubmFtZSB9fVwiXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiQ2hhcmFjdGVyXCIgJX1cbiAgICAgICAgXCJcIlxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkludFwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEb3VibGVcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRmxvYXRcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiVUludFwiICV9XG4gICAgICAgIDBcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJCb29sXCIgJX1cbiAgICAgICAgZmFsc2VcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEYXRlXCIgJX1cbiAgICAgICAgLmRpc3RhbnRGdXR1cmVcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJVUkxcIiAlfVxuICAgICAgICAuaW5pdChzdHJpbmc6IFwid3d3LnRlc3QuY29tXCIpLnVuc2FmZWx5VW53cmFwcGVkXG4gICAgeyUgZWxpZiBmb3VuZGF0aW9uVHlwZXNXaXRoTm9GaXh0dXJlfGNvbnRhaW5zOiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lICV9XG4gICAgICAgIC5pbml0KClcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGUua2luZCA9PSBcImVudW1cIiAlfVxuICAgICAgICAue3sgdmFyaWFibGUudHlwZS5jYXNlcy5maXJzdC5uYW1lIH19XG4gICAgeyUgZWxzZSAlfVxuICAgICAgICB7JSBpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lfGNvbnRhaW5zOlwiW1wiIGFuZCB2YXJpYWJsZS50eXBlTmFtZS5uYW1lfGNvbnRhaW5zOlwiXVwiICV9XG4gICAgICAgICAgICAuaW5pdCgpXG4gICAgICAgIHslIGVsc2UgJX1cbiAgICAgICAgICAgIC5maXh0dXJlKClcbiAgICAgICAgeyUgZW5kaWYgJX1cbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMuc3RydWN0cyAlfXsjIFVzZSB0eXBlcy5pbXBsZW1lbnRpbmcuQXV0b0ZpeHR1cmUgaW5zdGVhZCBvZiB0eXBlcy5zdHJ1Y3RzIGlmIGRlY2lkZWQgdG8gaGF2ZSB0aGlzIHByb3RvY29sICN9XG57eyB0eXBlLmFjY2Vzc0xldmVsIH19IGV4dGVuc2lvbiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHN0YXRpYyBmdW5jIGZpeHR1cmUoXG4gICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICB7JSBzZXQgZGVmYXVsdFZhbHVlICV9IHslIGNhbGwgZGVmYXVsdFZhbHVlRm9yVHlwZSB2YXJpYWJsZSAlfSB7JSBlbmRzZXQgJX1cbiAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUudHlwZU5hbWUubmFtZSB9fSA9IHt7IGRlZmF1bHRWYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUubmFtZSB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgKVxuICAgIH1cbn1cbnslIGVuZGZvciAlfSIsInZlcnNpb24iOjMsImZhdm9yaXRlIjp0cnVlLCJhdXRob3IiOiJFZHVhcmRvIEJvY2F0byIsImdlbmVyYXRlZENvZGUiOiJpbnRlcm5hbCBleHRlbnNpb24gTXlNb2RlbCB7XG4gICAgc3RhdGljIGZ1bmMgZml4dHVyZShcbiAgICAgICAgYW5JbnQ6IEludCA9IDAsIFxuICAgICAgICBhblVJbnQ6IFVJbnQgPSAwLCBcbiAgICAgICAgYUZsb2F0OiBGbG9hdCA9IDAsIFxuICAgICAgICBhRG91YmxlOiBEb3VibGUgPSAwLCBcbiAgICAgICAgYUJvb2w6IEJvb2wgPSBmYWxzZSwgXG4gICAgICAgIGFTdHJpbmc6IFN0cmluZyA9IFwiYVN0cmluZ1wiLCBcbiAgICAgICAgYUNoYXJhY3RlcjogQ2hhcmFjdGVyID0gXCJcIiwgXG4gICAgICAgIGFuQXJyYXk6IEFycmF5ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFuQXJyYXkyOiBbSW50XSA9IC5pbml0KCksIFxuICAgICAgICBhRGljdGlvbmFyeTogRGljdGlvbmFyeSA9IC5maXh0dXJlKCksIFxuICAgICAgICBhRGljdGlvbmFyeTI6IFtTdHJpbmc6IFN0cmluZ10gPSAuaW5pdCgpLCBcbiAgICAgICAgYVNldDogU2V0ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFEYXRlOiBEYXRlID0gLmRpc3RhbnRGdXR1cmUsIFxuICAgICAgICBhRGF0YTogRGF0YSA9IC5pbml0KCksIFxuICAgICAgICBhblVSTDogVVJMID0gLmluaXQoc3RyaW5nOlwid3d3LnRlc3QuY29tXCIpLnVuc2FmZWx5VW53cmFwcGVkLCBcbiAgICAgICAgYVNvbWV0aGluZzogU29tZXRoaW5nID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFuRW51bTogTXlFbnVtID0gLmZpcnN0Q2FzZVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIGFuSW50OiBhbkludCwgXG4gICAgICAgICAgICBhblVJbnQ6IGFuVUludCwgXG4gICAgICAgICAgICBhRmxvYXQ6IGFGbG9hdCwgXG4gICAgICAgICAgICBhRG91YmxlOiBhRG91YmxlLCBcbiAgICAgICAgICAgIGFCb29sOiBhQm9vbCwgXG4gICAgICAgICAgICBhU3RyaW5nOiBhU3RyaW5nLCBcbiAgICAgICAgICAgIGFDaGFyYWN0ZXI6IGFDaGFyYWN0ZXIsIFxuICAgICAgICAgICAgYW5BcnJheTogYW5BcnJheSwgXG4gICAgICAgICAgICBhbkFycmF5MjogYW5BcnJheTIsIFxuICAgICAgICAgICAgYURpY3Rpb25hcnk6IGFEaWN0aW9uYXJ5LCBcbiAgICAgICAgICAgIGFEaWN0aW9uYXJ5MjogYURpY3Rpb25hcnkyLCBcbiAgICAgICAgICAgIGFTZXQ6IGFTZXQsIFxuICAgICAgICAgICAgYURhdGU6IGFEYXRlLCBcbiAgICAgICAgICAgIGFEYXRhOiBhRGF0YSwgXG4gICAgICAgICAgICBhblVSTDogYW5VUkwsIFxuICAgICAgICAgICAgYVNvbWV0aGluZzogYVNvbWV0aGluZywgXG4gICAgICAgICAgICBhbkVudW06IGFuRW51bVxuICAgICAgICApXG4gICAgfVxufSIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjAsImZpbGVVUkwiOiJmaWxlOlwvXC9cL1VzZXJzXC9ib2NhdGVkdVwvYWRpZGFzXC9kZXZlbG9wbWVudFwvU291cmNlcnlSZXNvdXJjZXNcL0F1dG9GaXh0dXJlXC9BdXRvRml4dHVyZS5zb3VyY2VyeXRlbXBsYXRlIiwicnVuQ29uZmlndXJhdGlvbiI6InNlbGVjdGlvbiIsInNhbXBsZUNvZGUiOiJlbnVtIE15RW51bSB7XG4gICAgY2FzZSBmaXJzdENhc2VcbiAgICBjYXNlIHNlY29uZENhc2Vcbn1cblxuc3RydWN0IE15TW9kZWw6IEF1dG9GaXh0dXJlIHtcbiAgICBsZXQgYW5JbnQ6IEludFxuICAgIGxldCBhblVJbnQ6IFVJbnRcbiAgICBsZXQgYUZsb2F0OiBGbG9hdFxuICAgIGxldCBhRG91YmxlOiBEb3VibGVcbiAgICBsZXQgYUJvb2w6IEJvb2xcbiAgICBsZXQgYVN0cmluZzogU3RyaW5nXG4gICAgbGV0IGFDaGFyYWN0ZXI6IENoYXJhY3RlclxuICAgIGxldCBhbkFycmF5OiBBcnJheVxuICAgIGxldCBhbkFycmF5MjogW0ludF1cbiAgICBsZXQgYURpY3Rpb25hcnk6IERpY3Rpb25hcnlcbiAgICBsZXQgYURpY3Rpb25hcnkyOiBbU3RyaW5nOiBTdHJpbmddXG4gICAgbGV0IGFTZXQ6IFNldFxuICAgIGxldCBhRGF0ZTogRGF0ZVxuICAgIGxldCBhRGF0YTogRGF0YVxuICAgIGxldCBhblVSTDogVVJMXG4gICAgbGV0IGFTb21ldGhpbmc6IFNvbWV0aGluZ1xuICAgIGxldCBhbkVudW06IE15RW51bVxufSIsImlzTG9ja2VkIjpmYWxzZSwia2luZCI6InN0ZW5jaWwiLCJ0cmltV2hpdGVzcGFjZXMiOnRydWUsIm5hbWUiOiJBdXRvRml4dHVyZSIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUifQ=="}