{"version":3,"instance":"eyJpZCI6IkIwMUM0NjlELTlGQjMtNEQ3RS1CRkM2LTIxMkY2MzMyNEMxMCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBzcGVjaWFsIGluaXRpYWxpemVyIGBmaXh0dXJlYCB0byBzaW1wbGlmeSB0ZXN0aW5nIHdoZW4gbW9ja2luZyBvYmplY3RzLiIsImNvbnRlbnQiOiJ7JSBtYWNybyBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCIsIFwiVVJMXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIlN0cmluZ1wiICV9XG4gICAgICAgIFwie3sgdmFyaWFibGUubmFtZSB9fVwiXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiQ2hhcmFjdGVyXCIgJX1cbiAgICAgICAgXCJcIlxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkludFwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEb3VibGVcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRmxvYXRcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiVUludFwiICV9XG4gICAgICAgIDBcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJCb29sXCIgJX1cbiAgICAgICAgZmFsc2VcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEYXRlXCIgJX1cbiAgICAgICAgLmRpc3RhbnRGdXR1cmVcbiAgICB7JSBlbGlmIGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmV8Y29udGFpbnM6IHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyB2YXJpYWJsZS50eXBlLmNhc2VzLmZpcnN0Lm5hbWUgfX1cbiAgICB7JSBlbHNlICV9XG4gICAgICAgIHslIGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWV8Y29udGFpbnM6XCJbXCIgYW5kIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWV8Y29udGFpbnM6XCJdXCIgJX1cbiAgICAgICAgICAgIC5pbml0KClcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICAgICAgLmZpeHR1cmUoKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVuZGlmICV9XG57JSBlbmRtYWNybyAlfVxuXG57JSBmb3IgdHlwZSBpbiB0eXBlcy5zdHJ1Y3RzICV9eyMgVXNlIHR5cGVzLmltcGxlbWVudGluZy5BdXRvRml4dHVyZSBpbnN0ZWFkIG9mIHR5cGVzLnN0cnVjdHMgaWYgZGVjaWRlZCB0byBoYXZlIHRoaXMgcHJvdG9jb2wgI31cbnt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gZXh0ZW5zaW9uIHt7IHR5cGUubmFtZSB9fSB7XG4gICAgc3RhdGljIGZ1bmMgZml4dHVyZShcbiAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgIHslIHNldCBkZWZhdWx0VmFsdWUgJX0geyUgY2FsbCBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9IHslIGVuZHNldCAlfVxuICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS50eXBlTmFtZS5uYW1lIH19ID0ge3sgZGVmYXVsdFZhbHVlfHJlbW92ZU5ld2xpbmVzIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG4gICAgKSAtPiBTZWxmIHtcbiAgICAgICAgcmV0dXJuIC5pbml0KFxuICAgICAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUuc3RvcmVkVmFyaWFibGVzICV9XG4gICAgICAgICAgICB7eyB2YXJpYWJsZS5uYW1lIH19OiB7eyB2YXJpYWJsZS5uYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSwgeyUgZW5kaWYgJX1cbiAgICAgICAgICAgIHslIGVuZGZvciAlfVxuICAgICAgICApXG4gICAgfVxufVxueyUgZW5kZm9yICV9IiwidmVyc2lvbiI6MywiZmF2b3JpdGUiOnRydWUsImF1dGhvciI6IkVkdWFyZG8gQm9jYXRvIiwiZ2VuZXJhdGVkQ29kZSI6ImludGVybmFsIGV4dGVuc2lvbiBNeU1vZGVsIHtcbiAgICBzdGF0aWMgZnVuYyBmaXh0dXJlKFxuICAgICAgICBhbkludDogSW50ID0gMCwgXG4gICAgICAgIGFuVUludDogVUludCA9IDAsIFxuICAgICAgICBhRmxvYXQ6IEZsb2F0ID0gMCwgXG4gICAgICAgIGFEb3VibGU6IERvdWJsZSA9IDAsIFxuICAgICAgICBhQm9vbDogQm9vbCA9IGZhbHNlLCBcbiAgICAgICAgYVN0cmluZzogU3RyaW5nID0gXCJhU3RyaW5nXCIsIFxuICAgICAgICBhQ2hhcmFjdGVyOiBDaGFyYWN0ZXIgPSBcIlwiLCBcbiAgICAgICAgYW5BcnJheTogQXJyYXkgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYW5BcnJheTI6IFtJbnRdID0gLmluaXQoKSwgXG4gICAgICAgIGFEaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5ID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFEaWN0aW9uYXJ5MjogW1N0cmluZzogU3RyaW5nXSA9IC5pbml0KCksIFxuICAgICAgICBhU2V0OiBTZXQgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYURhdGU6IERhdGUgPSAuZGlzdGFudEZ1dHVyZSwgXG4gICAgICAgIGFEYXRhOiBEYXRhID0gLmluaXQoKSwgXG4gICAgICAgIGFuVVJMOiBVUkwgPSAuaW5pdCgpLCBcbiAgICAgICAgYVNvbWV0aGluZzogU29tZXRoaW5nID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFuRW51bTogTXlFbnVtID0gLmZpcnN0Q2FzZVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIGFuSW50OiBhbkludCwgXG4gICAgICAgICAgICBhblVJbnQ6IGFuVUludCwgXG4gICAgICAgICAgICBhRmxvYXQ6IGFGbG9hdCwgXG4gICAgICAgICAgICBhRG91YmxlOiBhRG91YmxlLCBcbiAgICAgICAgICAgIGFCb29sOiBhQm9vbCwgXG4gICAgICAgICAgICBhU3RyaW5nOiBhU3RyaW5nLCBcbiAgICAgICAgICAgIGFDaGFyYWN0ZXI6IGFDaGFyYWN0ZXIsIFxuICAgICAgICAgICAgYW5BcnJheTogYW5BcnJheSwgXG4gICAgICAgICAgICBhbkFycmF5MjogYW5BcnJheTIsIFxuICAgICAgICAgICAgYURpY3Rpb25hcnk6IGFEaWN0aW9uYXJ5LCBcbiAgICAgICAgICAgIGFEaWN0aW9uYXJ5MjogYURpY3Rpb25hcnkyLCBcbiAgICAgICAgICAgIGFTZXQ6IGFTZXQsIFxuICAgICAgICAgICAgYURhdGU6IGFEYXRlLCBcbiAgICAgICAgICAgIGFEYXRhOiBhRGF0YSwgXG4gICAgICAgICAgICBhblVSTDogYW5VUkwsIFxuICAgICAgICAgICAgYVNvbWV0aGluZzogYVNvbWV0aGluZywgXG4gICAgICAgICAgICBhbkVudW06IGFuRW51bVxuICAgICAgICApXG4gICAgfVxufSIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjAsImZpbGVVUkwiOiJmaWxlOlwvXC9cL1VzZXJzXC9ib2NhdGVkdVwvYWRpZGFzXC9kZXZlbG9wbWVudFwvU291cmNlcnlSZXNvdXJjZXNcL0F1dG9GaXh0dXJlXC9BdXRvRml4dHVyZS5zb3VyY2VyeXRlbXBsYXRlIiwicnVuQ29uZmlndXJhdGlvbiI6InNlbGVjdGlvbiIsInNhbXBsZUNvZGUiOiJlbnVtIE15RW51bSB7XG4gICAgY2FzZSBmaXJzdENhc2VcbiAgICBjYXNlIHNlY29uZENhc2Vcbn1cblxuc3RydWN0IE15TW9kZWw6IEF1dG9GaXh0dXJlIHtcbiAgICBsZXQgYW5JbnQ6IEludFxuICAgIGxldCBhblVJbnQ6IFVJbnRcbiAgICBsZXQgYUZsb2F0OiBGbG9hdFxuICAgIGxldCBhRG91YmxlOiBEb3VibGVcbiAgICBsZXQgYUJvb2w6IEJvb2xcbiAgICBsZXQgYVN0cmluZzogU3RyaW5nXG4gICAgbGV0IGFDaGFyYWN0ZXI6IENoYXJhY3RlclxuICAgIGxldCBhbkFycmF5OiBBcnJheVxuICAgIGxldCBhbkFycmF5MjogW0ludF1cbiAgICBsZXQgYURpY3Rpb25hcnk6IERpY3Rpb25hcnlcbiAgICBsZXQgYURpY3Rpb25hcnkyOiBbU3RyaW5nOiBTdHJpbmddXG4gICAgbGV0IGFTZXQ6IFNldFxuICAgIGxldCBhRGF0ZTogRGF0ZVxuICAgIGxldCBhRGF0YTogRGF0YVxuICAgIGxldCBhblVSTDogVVJMXG4gICAgbGV0IGFTb21ldGhpbmc6IFNvbWV0aGluZ1xuICAgIGxldCBhbkVudW06IE15RW51bVxufSIsImlzTG9ja2VkIjpmYWxzZSwia2luZCI6InN0ZW5jaWwiLCJ0cmltV2hpdGVzcGFjZXMiOnRydWUsIm5hbWUiOiJBdXRvRml4dHVyZSIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUifQ=="}