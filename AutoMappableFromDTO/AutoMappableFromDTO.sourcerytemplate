{"version":3,"instance":"eyJpZCI6IjMzNTc2OTY2LTcxRjktNDJFMi05Nzc0LUI4MkU2OUQzQjI0OSIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyB0aGUgaW5pdGlhbGl6ZXIgZm9yIGNsYXNzIHRoYXQgaGF2ZSBhIERUTyBpbiBvcmRlciB0byBtYXAgZnJvbSBEVE8gdG8gRG9tYWluIGVudGl0eS4iLCJjb250ZW50IjoieyUgbWFjcm8gZ2V0QXJyYXlUeXBlTmFtZSB2YXJpYWJsZSAlfVxueyUgc2V0IGNsZWFuTGVmdCAlfSB7eyB2YXJpYWJsZS50eXBlTmFtZS5uYW1lfHJlcGxhY2U6IFwiXVwiLCBcIlwifX0geyUgZW5kc2V0ICV9XG57eyBjbGVhbkxlZnR8cmVwbGFjZTogXCJbXCIsIFwiXCJ9fVxueyUgZW5kbWFjcm8gJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMuc3RydWN0cyAlfVxueyUgc2V0IGZvdW5kYXRpb25UeXBlcyAlfVxuICAgIFtcbiAgICAgICAgXCJJbnRcIiwgXCJVSW50XCIsIFwiRmxvYXRcIiwgXCJEb3VibGVcIiwgXCJCb29sXCIsIFwiU3RyaW5nXCIsIFwiQ2hhcmFjdGVyXCIsIFxuICAgICAgICBcIk9wdGlvbmFsXCIsIFwiQXJyYXlcIiwgXCJEaWN0aW9uYXJ5XCIsIFwiU2V0XCIsIFwiRGF0ZVwiLCBcIkRhdGFcIiwgXCJVUkxcIiwgXG4gICAgICAgIFwiUmFuZ2VcIiwgXCJDbG9zZWRSYW5nZVwiLCBcIkVycm9yXCIsIFwiQW55XCIsIFwiQW55T2JqZWN0XCIsIFwiVm9pZFwiXG4gICAgXVxueyUgZW5kc2V0ICV9XG57JSBpZiBub3QgdHlwZS5uYW1lfGNvbnRhaW5zOiBcIkRUT1wiICV9XG57JSBuZXdsaW5lICV9e3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSBleHRlbnNpb24ge3sgdHlwZS5uYW1lIH19IHtcbiAgICBpbml0KFxuICAgICAgICBkdG86IHt7IHR5cGUubmFtZSB9fURUT3slIGlmIHR5cGUudmFyaWFibGVzLmNvdW50ID4gMSAlfSx7JSBlbmRpZiAlfVxuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgeyUgaWYgdmFyaWFibGUuaXNBcnJheSAlfVxuICAgICAgICAgICAgeyUgc2V0IGNsZWFuQXJyYXlUeXBlUmV0dXJuICV9IHslIGNhbGwgZ2V0QXJyYXlUeXBlTmFtZSB2YXJpYWJsZSAlfSB7JSBlbmRzZXQgJX17JSBzZXQgY2xlYW5BcnJheVR5cGUgJX17eyBjbGVhbkFycmF5VHlwZVJldHVybnxyZW1vdmVOZXdsaW5lcyB9fXslIGVuZHNldCAlfVxuICAgICAgICAgICAgeyUgaWYgZm91bmRhdGlvblR5cGVzfGNvbnRhaW5zOmNsZWFuQXJyYXlUeXBlICV9XG4gICAgICAgIG1hcHt7dmFyaWFibGUubmFtZXx1cHBlckZpcnN0TGV0dGVyfX1Gcm9tRFRPOiAoW3t7Y2xlYW5BcnJheVR5cGV9fV0pIC0+IHt7IHZhcmlhYmxlLnR5cGVOYW1lIH19eyUgaWYgbm90IGZvcmxvb3AubGFzdCAlfSx7JSBlbmRpZiAlfVxuICAgICAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICBtYXB7e3ZhcmlhYmxlLm5hbWV8dXBwZXJGaXJzdExldHRlcn19RW50aXR5RnJvbURUTzogKFt7e2NsZWFuQXJyYXlUeXBlfX1EVE9dKSAtPiB7eyB2YXJpYWJsZS50eXBlTmFtZSB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0seyUgZW5kaWYgJX1cbiAgICAgICAgICAgIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgICkge1xuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgeyUgc2V0IGNsZWFuQXJyYXlUeXBlUmV0dXJuICV9IHslIGNhbGwgZ2V0QXJyYXlUeXBlTmFtZSB2YXJpYWJsZSAlfSB7JSBlbmRzZXQgJX17JSBzZXQgY2xlYW5BcnJheVR5cGUgJX17eyBjbGVhbkFycmF5VHlwZVJldHVybnxyZW1vdmVOZXdsaW5lcyB9fXslIGVuZHNldCAlfVxuICAgICAgICB7JSBpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lfGNvbnRhaW5zOlwiW1wiIGFuZCB2YXJpYWJsZS50eXBlTmFtZS5uYW1lfGNvbnRhaW5zOlwiXVwiICV9XG4gICAgICAgIHslIGlmIG5vdCBmb3VuZGF0aW9uVHlwZXN8Y29udGFpbnM6Y2xlYW5BcnJheVR5cGUgJX1cbiAgICAgICAgc2VsZi57e3ZhcmlhYmxlLm5hbWV9fSA9IG1hcHt7dmFyaWFibGUubmFtZXx1cHBlckZpcnN0TGV0dGVyfX1FbnRpdHlGcm9tRFRPKGR0by57e3ZhcmlhYmxlLm5hbWV9fSlcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICBzZWxmLnt7dmFyaWFibGUubmFtZX19ID0gbWFwe3t2YXJpYWJsZS5uYW1lfHVwcGVyRmlyc3RMZXR0ZXJ9fUZyb21EVE8oZHRvLnt7dmFyaWFibGUubmFtZX19KVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgICAgICB7JSBlbGlmIG5vdCBmb3VuZGF0aW9uVHlwZXN8Y29udGFpbnM6IHZhcmlhYmxlLnR5cGVOYW1lICV9XG4gICAgICAgIHNlbGYue3t2YXJpYWJsZS5uYW1lfX0gPSAuaW5pdChkdG86IGR0by57e3ZhcmlhYmxlLm5hbWV9fSlcbiAgICAgICAgeyUgZWxzZSAlfVxuICAgICAgICBzZWxmLnt7dmFyaWFibGUubmFtZX19ID0gZHRvLnt7dmFyaWFibGUubmFtZX19XG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgIH1cbn1cbnslIGVuZGlmICV9XG57JSBlbmRmb3IgJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMuZW51bXMgd2hlcmUgdHlwZS5jYXNlcy5jb3VudCA+IDAgJX1cbnt7dHlwZS5hY2Nlc3NMZXZlbH19IGV4dGVuc2lvbiB7e3R5cGUubmFtZX19IHtcbiAgICBpbml0KGR0bzoge3sgdHlwZS5uYW1lIH19RFRPKSB7XG4gICAgICAgIHN3aXRjaCBkdG8ge1xuICAgICAgICB7JSBmb3IgcCBpbiB0eXBlLmNhc2VzICV9XG4gICAgICAgIGNhc2UgLnt7cC5uYW1lfX06IHNlbGYgPSAue3twLm5hbWV9fVxuICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgfVxuICAgIH1cbn1cbnslIGVuZGZvciAlfSIsInZlcnNpb24iOjMsImZhdm9yaXRlIjp0cnVlLCJhdXRob3IiOiJFZHVhcmRvIEJvY2F0byIsImdlbmVyYXRlZENvZGUiOiJcbmludGVybmFsIGV4dGVuc2lvbiBMaXN0SXRlbSB7XG4gICAgaW5pdChcbiAgICAgICAgZHRvOiBMaXN0SXRlbURUT1xuICAgICkge1xuICAgICAgICBzZWxmLnZhbHVlID0gZHRvLnZhbHVlXG4gICAgfVxufVxuXG5pbnRlcm5hbCBleHRlbnNpb24gTXlPYmplY3Qge1xuICAgIGluaXQoXG4gICAgICAgIGR0bzogTXlPYmplY3REVE8sXG4gICAgICAgIG1hcFN0cmluZ0xpc3RGcm9tRFRPOiAoW1N0cmluZ10pIC0+IFtTdHJpbmddLFxuICAgICAgICBtYXBJdGVtc0xpc3RFbnRpdHlGcm9tRFRPOiAoW0xpc3RJdGVtRFRPXSkgLT4gW0xpc3RJdGVtXVxuICAgICkge1xuICAgICAgICBzZWxmLmlkID0gZHRvLmlkXG4gICAgICAgIHNlbGYuaW50VmFsdWUgPSBkdG8uaW50VmFsdWVcbiAgICAgICAgc2VsZi5zdGF0dXMgPSAuaW5pdChkdG86IGR0by5zdGF0dXMpXG4gICAgICAgIHNlbGYuc3RyaW5nTGlzdCA9IG1hcFN0cmluZ0xpc3RGcm9tRFRPKGR0by5zdHJpbmdMaXN0KVxuICAgICAgICBzZWxmLml0ZW1zTGlzdCA9IG1hcEl0ZW1zTGlzdEVudGl0eUZyb21EVE8oZHRvLml0ZW1zTGlzdClcbiAgICB9XG59XG5cbmludGVybmFsIGV4dGVuc2lvbiBTdGF0dXMge1xuICAgIGluaXQoZHRvOiBTdGF0dXNEVE8pIHtcbiAgICAgICAgc3dpdGNoIGR0byB7XG4gICAgICAgIGNhc2UgLmlkbGU6IHNlbGYgPSAuaWRsZVxuICAgICAgICBjYXNlIC5jb21wbGV0ZWQ6IHNlbGYgPSAuY29tcGxldGVkXG4gICAgICAgIH1cbiAgICB9XG59IiwidXJsIjoiIiwicmVnZW5lcmF0aW9uQ291bnRlciI6MzksImZpbGVVUkwiOiJmaWxlOlwvXC9cL1VzZXJzXC9ib2NhdGVkdVwvYWRpZGFzXC9kZXZlbG9wbWVudFwvU291cmNlcnlSZXNvdXJjZXNcL0F1dG9NYXBwYWJsZUZyb21EVE9cL0F1dG9NYXBwYWJsZUZyb21EVE8uc291cmNlcnl0ZW1wbGF0ZSIsInJ1bkNvbmZpZ3VyYXRpb24iOiJzZWxlY3Rpb24iLCJzYW1wbGVDb2RlIjoiaW1wb3J0IEZvdW5kYXRpb25cblxuZW51bSBTdGF0dXMge1xuICAgIGNhc2UgaWRsZVxuICAgIGNhc2UgY29tcGxldGVkXG59XG5cbnN0cnVjdCBMaXN0SXRlbSB7XG4gICAgbGV0IHZhbHVlOiBTdHJpbmdcbn1cblxuc3RydWN0IE15T2JqZWN0IHtcbiAgICBsZXQgaWQ6IFN0cmluZ1xuICAgIGxldCBpbnRWYWx1ZTogSW50XG4gICAgbGV0IHN0YXR1czogU3RhdHVzXG4gICAgbGV0IHN0cmluZ0xpc3Q6IFtTdHJpbmddXG4gICAgbGV0IGl0ZW1zTGlzdDogW0xpc3RJdGVtXVxufVxuIiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IkF1dG9NYXBwYWJsZUZyb21EVE8iLCJpbnNlcnRpb25Nb2RlIjoiZW5kT2ZGaWxlIn0="}