{% macro getArrayTypeName variable %}
{% set cleanLeft %} {{ variable.typeName.name|replace: "]", ""}} {% endset %}
{{ cleanLeft|replace: "[", ""}}
{% endmacro %}

{% for type in types.structs %}
{% set foundationTypes %}
    [
        "Int", "UInt", "Float", "Double", "Bool", "String", "Character", 
        "Optional", "Array", "Dictionary", "Set", "Date", "Data", "URL", 
        "Range", "ClosedRange", "Error", "Any", "AnyObject", "Void"
    ]
{% endset %}
{% if not type.name|contains: "DTO" %}
{{ type.accessLevel }} extension {{ type.name }} {
    init(
        dto: {{ type.name }}DTO
        {% for variable in type.variables %}
        {% if variable.typeName.name|contains:"[" and variable.typeName.name|contains:"]" %}
        {% set cleanArrayTypeReturn %} {% call getArrayTypeName variable %} {% endset %}
        {% set cleanArrayType %}{{ cleanArrayTypeReturn|removeNewlines }}{% endset %}
        {% if foundationTypes|contains:cleanArrayType %}
        map{{variable.name|upperFirstLetter}}FromDTO: ([{{cleanArrayType}}]) -> {{ variable.typeName }}
        {% else %}
        map{{variable.name|upperFirstLetter}}EntityFromDTO: ([{{cleanArrayType}}DTO]) -> {{ variable.typeName }}
        {% endif %}
        {% endif %}
        {% endfor %}
    ) {
        {% for variable in type.variables %}
        {% if variable.typeName.name|contains:"[" and variable.typeName.name|contains:"]" %}
        {% if value %}
        self.{{variable.name}} = map{{variable.name|upperFirstLetter}}EntityFromDTO(dto.{{variable.name}})
        {% else %}
        self.{{variable.name}} = map{{variable.name|upperFirstLetter}}FromDTO(dto.{{variable.name}})
        {% endif %}
        {% elif not foundationTypes|contains: variable.typeName %}
        self.{{variable.name}} = .init(dto: dto.{{variable.name}})
        {% else %}
        self.{{variable.name}} = dto.{{variable.name}}
        {% endif %}
        {% endfor %}
    }
}{% newline %}
{% endif %}
{% endfor %}
