{"version":3,"instance":"eyJpZCI6IkU5OTdBNzcyLTRBMjYtNDMwQS04MTYzLTZFNkVGRkUwNTRFOCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBzcGVjaWFsIGluaXRpYWxpemVyIGBmaXh0dXJlYCB0byBzaW1wbGlmeSB0ZXN0aW5nIHdoZW4gbW9ja2luZyBvYmplY3RzLiIsImNvbnRlbnQiOiJ7JSBtYWNybyBkZWZhdWx0VmFsdWVGb3JUeXBlIHZhcmlhYmxlICV9XG4gICAgeyUgc2V0IGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmUgJX0gXG4gICAgW1xuICAgICAgICBcIkRhdGVcIiwgXCJEYXRhXCIsIFwiVVJMXCJcbiAgICBdXG4gICAgeyUgZW5kc2V0ICV9XG4gICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIlN0cmluZ1wiICV9XG4gICAgICAgIFwie3sgdmFyaWFibGUubmFtZSB9fVwiXG4gICAgeyUgZWxpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiQ2hhcmFjdGVyXCIgJX1cbiAgICAgICAgXCJcIlxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZU5hbWUubmFtZSA9PSBcIkludFwiIG9yIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEb3VibGVcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiRmxvYXRcIiBvciB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiVUludFwiICV9XG4gICAgICAgIDBcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJCb29sXCIgJX1cbiAgICAgICAgZmFsc2VcbiAgICB7JSBlbGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJEYXRlXCIgJX1cbiAgICAgICAgLmRpc3RhbnRGdXR1cmVcbiAgICB7JSBlbGlmIGZvdW5kYXRpb25UeXBlc1dpdGhOb0ZpeHR1cmV8Y29udGFpbnM6IHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgJX1cbiAgICAgICAgLmluaXQoKVxuICAgIHslIGVsaWYgdmFyaWFibGUudHlwZS5raW5kID09IFwiZW51bVwiICV9XG4gICAgICAgIC57eyB2YXJpYWJsZS50eXBlLmNhc2VzLmZpcnN0Lm5hbWUgfX1cbiAgICB7JSBlbHNlICV9XG4gICAgICAgIC5maXh0dXJlKClcbiAgICB7JSBlbmRpZiAlfVxueyUgZW5kbWFjcm8gJX1cblxueyUgZm9yIHR5cGUgaW4gdHlwZXMuc3RydWN0cyAlfXsjIFVzZSB0eXBlcy5pbXBsZW1lbnRpbmcuQXV0b0ZpeHR1cmUgaW5zdGVhZCBvZiB0eXBlcy5zdHJ1Y3RzIGlmIGRlY2lkZWQgdG8gaGF2ZSB0aGlzIHByb3RvY29sICN9XG4jaWYgREVCVUdcbmV4dGVuc2lvbiB7eyB0eXBlLm5hbWUgfX0ge1xuICAgIHN0YXRpYyBmdW5jIGZpeHR1cmUoXG4gICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICB7JSBzZXQgZGVmYXVsdFZhbHVlICV9IHslIGNhbGwgZGVmYXVsdFZhbHVlRm9yVHlwZSB2YXJpYWJsZSAlfSB7JSBlbmRzZXQgJX1cbiAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUudHlwZU5hbWUubmFtZSB9fSA9IHt7IGRlZmF1bHRWYWx1ZXxyZW1vdmVOZXdsaW5lcyB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgICkgLT4gU2VsZiB7XG4gICAgICAgIHJldHVybiAuaW5pdChcbiAgICAgICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnN0b3JlZFZhcmlhYmxlcyAlfVxuICAgICAgICAgICAge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUubmFtZSB9fXslIGlmIG5vdCBmb3Jsb29wLmxhc3QgJX0sIHslIGVuZGlmICV9XG4gICAgICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgKVxuICAgIH1cbn1cbiNlbmRpZlxueyUgZW5kZm9yICV9IiwidmVyc2lvbiI6MywiZmF2b3JpdGUiOnRydWUsImF1dGhvciI6IkVkdWFyZG8gQm9jYXRvIiwiZ2VuZXJhdGVkQ29kZSI6IiNpZiBERUJVR1xuZXh0ZW5zaW9uIE15TW9kZWwge1xuICAgIHN0YXRpYyBmdW5jIGZpeHR1cmUoXG4gICAgICAgIGFuSW50OiBJbnQgPSAwLCBcbiAgICAgICAgYW5VSW50OiBVSW50ID0gMCwgXG4gICAgICAgIGFGbG9hdDogRmxvYXQgPSAwLCBcbiAgICAgICAgYURvdWJsZTogRG91YmxlID0gMCwgXG4gICAgICAgIGFCb29sOiBCb29sID0gZmFsc2UsIFxuICAgICAgICBhU3RyaW5nOiBTdHJpbmcgPSBcImFTdHJpbmdcIiwgXG4gICAgICAgIGFDaGFyYWN0ZXI6IENoYXJhY3RlciA9IFwiXCIsIFxuICAgICAgICBhbkFycmF5OiBBcnJheSA9IC5maXh0dXJlKCksIFxuICAgICAgICBhbkFycmF5MjogW0ludF0gPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYURpY3Rpb25hcnk6IERpY3Rpb25hcnkgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYURpY3Rpb25hcnkyOiBbU3RyaW5nOiBTdHJpbmddID0gLmZpeHR1cmUoKSwgXG4gICAgICAgIGFTZXQ6IFNldCA9IC5maXh0dXJlKCksIFxuICAgICAgICBhRGF0ZTogRGF0ZSA9IC5kaXN0YW50RnV0dXJlLCBcbiAgICAgICAgYURhdGE6IERhdGEgPSAuaW5pdCgpLCBcbiAgICAgICAgYW5VUkw6IFVSTCA9IC5pbml0KCksIFxuICAgICAgICBhU29tZXRoaW5nOiBTb21ldGhpbmcgPSAuZml4dHVyZSgpLCBcbiAgICAgICAgYW5FbnVtOiBNeUVudW0gPSAuZmlyc3RDYXNlXG4gICAgKSAtPiBTZWxmIHtcbiAgICAgICAgcmV0dXJuIC5pbml0KFxuICAgICAgICAgICAgYW5JbnQ6IGFuSW50LCBcbiAgICAgICAgICAgIGFuVUludDogYW5VSW50LCBcbiAgICAgICAgICAgIGFGbG9hdDogYUZsb2F0LCBcbiAgICAgICAgICAgIGFEb3VibGU6IGFEb3VibGUsIFxuICAgICAgICAgICAgYUJvb2w6IGFCb29sLCBcbiAgICAgICAgICAgIGFTdHJpbmc6IGFTdHJpbmcsIFxuICAgICAgICAgICAgYUNoYXJhY3RlcjogYUNoYXJhY3RlciwgXG4gICAgICAgICAgICBhbkFycmF5OiBhbkFycmF5LCBcbiAgICAgICAgICAgIGFuQXJyYXkyOiBhbkFycmF5MiwgXG4gICAgICAgICAgICBhRGljdGlvbmFyeTogYURpY3Rpb25hcnksIFxuICAgICAgICAgICAgYURpY3Rpb25hcnkyOiBhRGljdGlvbmFyeTIsIFxuICAgICAgICAgICAgYVNldDogYVNldCwgXG4gICAgICAgICAgICBhRGF0ZTogYURhdGUsIFxuICAgICAgICAgICAgYURhdGE6IGFEYXRhLCBcbiAgICAgICAgICAgIGFuVVJMOiBhblVSTCwgXG4gICAgICAgICAgICBhU29tZXRoaW5nOiBhU29tZXRoaW5nLCBcbiAgICAgICAgICAgIGFuRW51bTogYW5FbnVtXG4gICAgICAgIClcbiAgICB9XG59XG4jZW5kaWYiLCJ1cmwiOiIiLCJyZWdlbmVyYXRpb25Db3VudGVyIjowLCJmaWxlVVJMIjoiZmlsZTpcL1wvXC9Vc2Vyc1wvYm9jYXRlZHVcL0Rlc2t0b3BcL0F1dG9GaXh0dXJlLnNvdXJjZXJ5dGVtcGxhdGUiLCJydW5Db25maWd1cmF0aW9uIjoic2VsZWN0aW9uIiwic2FtcGxlQ29kZSI6InByb3RvY29sIEF1dG9GaXh0dXJlIHt9XG5cbmVudW0gTXlFbnVtIHtcbiAgICBjYXNlIGZpcnN0Q2FzZVxuICAgIGNhc2Ugc2Vjb25kQ2FzZVxufVxuXG5zdHJ1Y3QgTXlNb2RlbDogQXV0b0ZpeHR1cmUge1xuICAgIGxldCBhbkludDogSW50XG4gICAgbGV0IGFuVUludDogVUludFxuICAgIGxldCBhRmxvYXQ6IEZsb2F0XG4gICAgbGV0IGFEb3VibGU6IERvdWJsZVxuICAgIGxldCBhQm9vbDogQm9vbFxuICAgIGxldCBhU3RyaW5nOiBTdHJpbmdcbiAgICBsZXQgYUNoYXJhY3RlcjogQ2hhcmFjdGVyXG4gICAgbGV0IGFuQXJyYXk6IEFycmF5XG4gICAgbGV0IGFuQXJyYXkyOiBbSW50XVxuICAgIGxldCBhRGljdGlvbmFyeTogRGljdGlvbmFyeVxuICAgIGxldCBhRGljdGlvbmFyeTI6IFtTdHJpbmc6IFN0cmluZ11cbiAgICBsZXQgYVNldDogU2V0XG4gICAgbGV0IGFEYXRlOiBEYXRlXG4gICAgbGV0IGFEYXRhOiBEYXRhXG4gICAgbGV0IGFuVVJMOiBVUkxcbiAgICBsZXQgYVNvbWV0aGluZzogU29tZXRoaW5nXG4gICAgbGV0IGFuRW51bTogTXlFbnVtXG59IiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IkF1dG9GaXh0dXJlIiwiaW5zZXJ0aW9uTW9kZSI6ImVuZE9mRmlsZSJ9"}
