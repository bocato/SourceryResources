{"version":3,"instance":"eyJpZCI6IkI1QjVFQjk3LTEyQUQtNEE3Qy1BN0RFLTc1QUY2MzBCQkREMCIsImRlc2NyaXB0aW9uIjoiQ3JlYXRlcyBhIFRDQSBTY2FmZm9sZCBmcm9tIGEgc3BlY2lmaWNhdGlvbiBzdHJ1Y3QsIGJhc2VkIG9uIHRoZSBSZWR1Y2VyIHByb3RvY29sIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gaW4gYFNhbXBsZSBDb2RlYC5cblxuKk5PVEUqOiBCYXNlZCBvbiBAdGdyYXBwZXJvbuKAmXMgd29yayBmcm9tIHRoZSBgQ29tcG9zYWJsZSBGZWF0dXJlYCB0ZW1wbGF0ZS5cblxuTGlua2VkSW46IGh0dHBzOlwvXC93d3cubGlua2VkaW4uY29tXC9pblwvYm9jYXRvXC9cblR3aXR0ZXIgb3IgWDogaHR0cHM6XC9cL3R3aXR0ZXIuY29tXC9kdWJvY2F0byIsImNvbnRlbnQiOiJpbXBvcnQgQ29tcG9zYWJsZUFyY2hpdGVjdHVyZVxuaW1wb3J0IERlcGVuZGVuY2llc1xuaW1wb3J0IFN3aWZ0VUlcbnslIGZvciB0eXBlIGluIHR5cGVzLmFsbHxhbm5vdGF0ZWQ6IFwiZGVzY3JpYmVzVENBRmVhdHVyZVwiJX1cblxuXC9cLyBNQVJLOiAtIFN0YXRleyUgbmV3bGluZSAlfVxuZXh0ZW5zaW9uIHt7IHR5cGUubmFtZSB9fSB7XG4gICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSBzdHJ1Y3QgU3RhdGV7JSBpZiB0eXBlLmJhc2VkLkVxdWF0YWJsZSAlfTogRXF1YXRhYmxleyUgZW5kaWYgJX0ge1xuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB7JSBpZiB2YXJpYWJsZS5pc011dGFibGUgJX12YXJ7JSBlbHNlICV9bGV0eyUgZW5kaWYgJX0ge3sgdmFyaWFibGUubmFtZSB9fToge3sgdmFyaWFibGUudHlwZU5hbWUgfX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG5cbiAgICAgICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSBpbml0KFxuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgICAgIHt7IHZhcmlhYmxlLm5hbWUgfX06IHt7IHZhcmlhYmxlLnR5cGVOYW1lIH19eyUgaWYgdmFyaWFibGUuZGVmYXVsdFZhbHVlICV9ID0ge3sgdmFyaWFibGUuZGVmYXVsdFZhbHVlIH19eyUgZW5kaWYgJX17JSBpZiBub3QgZm9ybG9vcC5sYXN0ICV9LCB7JSBlbmRpZiAlfVxuICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgKSB7XG4gICAgICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnZhcmlhYmxlcyAlfVxuICAgICAgICAgICAgc2VsZi57eyB2YXJpYWJsZS5uYW1lIH19ID0ge3sgdmFyaWFibGUubmFtZSB9fVxuICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXC9cLyBNQVJLOiAtIEFjdGlvbnN7JSBuZXdsaW5lICV9XG5leHRlbnNpb24ge3sgdHlwZS5uYW1lIH19IHtcbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IGVudW0gQWN0aW9uOiBFcXVhdGFibGUge1xuICAgICAgICBjYXNlIHBsYWNlaG9sZGVyXG4gICAgICAgIHslIGlmIHR5cGV8YW5ub3RhdGVkOiBcImNvbnRhaW5zQ29tcG9zaXRpb25cIiAlfVxuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWV8Y29udGFpbnM6XCIuU3RhdGVcIiAlfVxuICAgICAgICBjYXNlIHt7IHZhcmlhYmxlLm5hbWUgfX0oe3sgdmFyaWFibGUudHlwZU5hbWV8cmVwbGFjZTogXCJTdGF0ZVwiLFwiQWN0aW9uXCJ8cmVwbGFjZTogXCI\/XCIsXCJcInxyZW1vdmVOZXdsaW5lcyB9fSlcbiAgICAgICAgeyUgZW5kaWYgJX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgfVxufVxuXG5cL1wvIE1BUks6IC0gUmVkdWNlcnslIG5ld2xpbmUgJX1cbnt7IHR5cGUuYWNjZXNzTGV2ZWwgfX0gc3RydWN0IHt7IHR5cGUubmFtZSB9fTogUmVkdWNlciB7XG4gICAgXC9cLyBNQVJLOiAtIERlcGVuZGVuY2llc3slIG5ld2xpbmUgJX1cbiAgICBARGVwZW5kZW5jeShcXC5maXJlQW5kRm9yZ2V0KSB2YXIgZmlyZUFuZEZvcmdldFxuXG4gICAgeyUgaWYgdHlwZXxhbm5vdGF0ZWQ6XCJjb250YWluc0NvbXBvc2l0aW9uXCIgJX1cbiAgICBcL1wvIE1BUks6IC0gQ29tcG9zaXRpb257JSBuZXdsaW5lICV9XG4gICAgdmFyIGJvZHk6IHNvbWUgUmVkdWNlck9mPHt7IHR5cGUubmFtZSB9fT4ge1xuICAgICAgICBSZWR1Y2UocmVkdWNlQ29yZShpbnRvOmFjdGlvbjopKVxuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWV8Y29udGFpbnM6XCIuU3RhdGVcIiBhbmQgdmFyaWFibGUuaXNPcHRpb25hbCAlfVxuICAgICAgICAgICAgLmlmTGV0KFxuICAgICAgICAgICAgICAgIFxcLnt7IHZhcmlhYmxlLm5hbWUgfX0sXG4gICAgICAgICAgICAgICAgIGFjdGlvbjogXC9BY3Rpb24ue3sgdmFyaWFibGUubmFtZSB9fSxcbiAgICAgICAgICAgICAgICAgdGhlbjogeyB7eyB2YXJpYWJsZS50eXBlTmFtZXxyZXBsYWNlOiBcIi5TdGF0ZT9cIixcIlwiIH19KCkgfVxuICAgICAgICAgICAgKVxuICAgICAgICB7JSBlbmRpZiAlfVxuICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHR5cGUudmFyaWFibGVzICV9XG4gICAgICAgIHslIGlmIHZhcmlhYmxlLnR5cGVOYW1lfGNvbnRhaW5zOlwiLlN0YXRlXCIgYW5kIG5vdCB2YXJpYWJsZS5pc09wdGlvbmFsICV9XG4gICAgICAgICAgICBTY29wZShcbiAgICAgICAgICAgICAgICBzdGF0ZTogXFwue3sgdmFyaWFibGUubmFtZSB9fSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwvQWN0aW9uLnt7IHZhcmlhYmxlLm5hbWUgfX0sXG4gICAgICAgICAgICAgICAgY2hpbGQ6IHt7IHZhcmlhYmxlLnR5cGVOYW1lfHJlcGxhY2U6IFwiLlN0YXRlP1wiLFwiXCIgfX0oKSB9XG4gICAgICAgICAgICApXG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgICAgIHslIGVuZGZvciAlfVxuICAgIH17JSBuZXdsaW5lICV9XG4gICAgXC9cLyBNQVJLOiAtIENvcmUgUmVkdWNlcnslIG5ld2xpbmUgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IGZ1bmMgcmVkdWNlQ29yZShcbiAgICAgICAgaW50byBzdGF0ZTogaW5vdXQgU3RhdGUsXG4gICAgICAgIGFjdGlvbjogQWN0aW9uXG4gICAgKSAtPiBDb21wb3NhYmxlQXJjaGl0ZWN0dXJlLkVmZmVjdDxBY3Rpb24+IHtcbiAgICAgICAgc3dpdGNoIGFjdGlvbiB7XG4gICAgICAgIGNhc2UgLnBsYWNlaG9sZGVyOlxuICAgICAgICAgICAgcmV0dXJuIC5ub25lXG4gICAgICAgIHslIGlmIHR5cGV8YW5ub3RhdGVkOiBcImNvbnRhaW5zQ29tcG9zaXRpb25cIiAlfVxuICAgICAgICB7JSBmb3IgdmFyaWFibGUgaW4gdHlwZS52YXJpYWJsZXMgJX1cbiAgICAgICAgeyUgaWYgdmFyaWFibGUudHlwZU5hbWV8Y29udGFpbnM6XCIuU3RhdGVcIiAlfVxuICAgICAgICBjYXNlIGxldCAue3sgdmFyaWFibGUubmFtZSB9fSh7eyB2YXJpYWJsZS5uYW1lIH19QWN0aW9uKTpcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2V7eyB2YXJpYWJsZS50eXBlTmFtZX19KFxuICAgICAgICAgICAgICAgIGludG86ICZzdGF0ZSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHt7IHZhcmlhYmxlLm5hbWUgfX1BY3Rpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgeyUgZW5kaWYgJX1cbiAgICAgICAgeyUgZW5kZm9yICV9XG4gICAgICAgIHslIGVuZGlmICV9XG4gICAgICAgIH1cbiAgICB9eyUgbmV3bGluZSAlfVxuICAgIHslIGZvciB2YXJpYWJsZSBpbiB0eXBlLnZhcmlhYmxlcyB3aGVyZSB0eXBlfGFubm90YXRlZDogXCJjb250YWluc0NvbXBvc2l0aW9uXCIgJX1cbiAgICB7JSBpZiB2YXJpYWJsZS50eXBlTmFtZXxjb250YWluczpcIi5TdGF0ZVwiICV9XG4gICAgeyUgc2V0IGNoaWxkVHlwZU5hbWUgJX17eyB2YXJpYWJsZS50eXBlTmFtZXxyZXBsYWNlOiBcIi5TdGF0ZVwiLFwiXCJ8cmVwbGFjZTogXCI\/XCIsXCJcIiB9fXslIGVuZHNldCAlfVxuICAgIFwvXC8gTUFSSzogLSB7eyB2YXJpYWJsZS5uYW1lfHVwcGVyRmlyc3RMZXR0ZXIgfX0gUmVkdWNlcnslIG5ld2xpbmUgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IGZ1bmMgcmVkdWNle3sgY2hpbGRUeXBlTmFtZXxyZW1vdmVOZXdsaW5lcyB9fShcbiAgICAgICAgaW50byBzdGF0ZTogaW5vdXQgU3RhdGUsXG4gICAgICAgIGFjdGlvbjoge3sgY2hpbGRUeXBlTmFtZXxyZW1vdmVOZXdsaW5lcyB9fUFjdGlvblxuICAgICkgLT4gQ29tcG9zYWJsZUFyY2hpdGVjdHVyZS5FZmZlY3Q8QWN0aW9uPiB7XG4gICAgICAgIHN3aXRjaCBhY3Rpb24ge1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gLm5vbmUgXC9cLyBUT0RPOiByZW1vdmUgZGVmYXVsdGAgY2FzZVxuICAgICAgICB9XG4gICAgfXslIG5ld2xpbmUgJX1cbiAgICB7JSBlbmRpZiAlfVxuICAgIHslIGVuZGZvciAlfVxuICAgIHslIGVsc2UgJX1cbiAgICBcL1wvIE1BUks6IC0gUmVkdWNlcnslIG5ld2xpbmUgJX1cbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IGZ1bmMgcmVkdWNlKFxuICAgICAgICBpbnRvIHN0YXRlOiBpbm91dCBTdGF0ZSxcbiAgICAgICAgYWN0aW9uOiBBY3Rpb25cbiAgICApIC0+IENvbXBvc2FibGVBcmNoaXRlY3R1cmUuRWZmZWN0PEFjdGlvbj4ge1xuICAgICAgICBzd2l0Y2ggYWN0aW9uIHtcbiAgICAgICAgY2FzZSAucGxhY2Vob2xkZXI6XG4gICAgICAgICAgICByZXR1cm4gLm5vbmVcbiAgICAgICAgfVxuICAgIH1cbiAgICB7JSBlbmRpZiAlfVxuICAgIFxufVxuXG5cL1wvIE1BUks6IC0gU2NlbmV7JSBuZXdsaW5lICV9XG5leHRlbnNpb24ge3sgdHlwZS5uYW1lIH19IHtcbiAgICB7eyB0eXBlLmFjY2Vzc0xldmVsIH19IHN0cnVjdCBTY2VuZTogVmlldyB7XG4gICAgICAgIGxldCBzdG9yZTogU3RvcmVPZjx7eyB0eXBlLm5hbWUgfX0+XG5cbiAgICAgICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSBpbml0KHN0b3JlOiBTdG9yZU9mPHt7IHR5cGUubmFtZSB9fT4pIHtcbiAgICAgICAgICAgIHNlbGYuc3RvcmUgPSBzdG9yZVxuICAgICAgICB9XG5cbiAgICAgICAge3sgdHlwZS5hY2Nlc3NMZXZlbCB9fSB2YXIgYm9keTogc29tZSBWaWV3IHtcbiAgICAgICAgICAgIFpTdGFjayB7XG4gICAgICAgICAgICAgICAgVGV4dChcInt7IHR5cGUubmFtZSB9fVNjZW5lXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuZnJhbWUobWF4V2lkdGg6IC5pbmZpbml0eSwgbWF4SGVpZ2h0OiAuaW5maW5pdHkpXG4gICAgICAgIH1cbiAgICB9XG59XG5cblwvXC8gTUFSSzogUHJldmlld1xuc3RydWN0IHt7IHR5cGUubmFtZSB9fVNjZW5lX1ByZXZpZXdzOiBQcmV2aWV3UHJvdmlkZXIge1xuICAgIHN0YXRpYyB2YXIgcHJldmlld3M6IHNvbWUgVmlldyB7XG4gICAgICAgIHt7IHR5cGUubmFtZSB9fS5TY2VuZShcbiAgICAgICAgICAgIHN0b3JlOiAuaW5pdChcbiAgICAgICAgICAgICAgICBpbml0aWFsU3RhdGU6IHt7IHR5cGUubmFtZSB9fS5TdGF0ZSgpLFxuICAgICAgICAgICAgICAgIHJlZHVjZXI6IHsgRW1wdHlSZWR1Y2VyKCkgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfVxufVxueyUgZW5kZm9yICV9IiwidmVyc2lvbiI6MywiZmF2b3JpdGUiOnRydWUsImF1dGhvciI6IkVkdWFyZG8gQm9jYXRvIiwiZ2VuZXJhdGVkQ29kZSI6ImltcG9ydCBDb21wb3NhYmxlQXJjaGl0ZWN0dXJlXG5pbXBvcnQgRGVwZW5kZW5jaWVzXG5pbXBvcnQgU3dpZnRVSVxuXG5cL1wvIE1BUks6IC0gU3RhdGVcblxuZXh0ZW5zaW9uIENvbXBvc2VkRmVhdHVyZSB7XG4gICAgaW50ZXJuYWwgc3RydWN0IFN0YXRlOiBFcXVhdGFibGUge1xuICAgICAgICBpbnRlcm5hbCB2YXIgbmFtZTogU3RyaW5nXG4gICAgICAgIGludGVybmFsIHZhciBkZXNjcmlwdGlvbjogU3RyaW5nP1xuICAgICAgICBpbnRlcm5hbCB2YXIgbnVtYmVyT2ZJdGVtczogSW50XG4gICAgICAgIGludGVybmFsIHZhciBjaGlsZDogQ2hpbGQxLlN0YXRlXG4gICAgICAgIGludGVybmFsIHZhciBvcHRpb25hbENoaWxkOiBDaGlsZDIuU3RhdGU\/XG5cbiAgICAgICAgaW50ZXJuYWwgaW5pdChcbiAgICAgICAgICAgIG5hbWU6IFN0cmluZyA9IFwiXCIsIFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFN0cmluZz8gPSBuaWwsIFxuICAgICAgICAgICAgbnVtYmVyT2ZJdGVtczogSW50ID0gMCwgXG4gICAgICAgICAgICBjaGlsZDogQ2hpbGQxLlN0YXRlID0gLmluaXQoKSwgXG4gICAgICAgICAgICBvcHRpb25hbENoaWxkOiBDaGlsZDIuU3RhdGU\/ID0gbmlsXG4gICAgICAgICkge1xuICAgICAgICAgICAgc2VsZi5uYW1lID0gbmFtZVxuICAgICAgICAgICAgc2VsZi5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBzZWxmLm51bWJlck9mSXRlbXMgPSBudW1iZXJPZkl0ZW1zXG4gICAgICAgICAgICBzZWxmLmNoaWxkID0gY2hpbGRcbiAgICAgICAgICAgIHNlbGYub3B0aW9uYWxDaGlsZCA9IG9wdGlvbmFsQ2hpbGRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXC9cLyBNQVJLOiAtIEFjdGlvbnNcblxuZXh0ZW5zaW9uIENvbXBvc2VkRmVhdHVyZSB7XG4gICAgaW50ZXJuYWwgZW51bSBBY3Rpb246IEVxdWF0YWJsZSB7XG4gICAgICAgIGNhc2UgcGxhY2Vob2xkZXJcbiAgICAgICAgY2FzZSBjaGlsZChDaGlsZDEuQWN0aW9uKVxuICAgICAgICBjYXNlIG9wdGlvbmFsQ2hpbGQoQ2hpbGQyLkFjdGlvbilcbiAgICB9XG59XG5cblwvXC8gTUFSSzogLSBSZWR1Y2VyXG5cbmludGVybmFsIHN0cnVjdCBDb21wb3NlZEZlYXR1cmU6IFJlZHVjZXIge1xuICAgIFwvXC8gTUFSSzogLSBEZXBlbmRlbmNpZXNcblxuICAgIEBEZXBlbmRlbmN5KFxcLmZpcmVBbmRGb3JnZXQpIHZhciBmaXJlQW5kRm9yZ2V0XG5cbiAgICBcL1wvIE1BUks6IC0gQ29tcG9zaXRpb25cblxuICAgIHZhciBib2R5OiBzb21lIFJlZHVjZXJPZjxDb21wb3NlZEZlYXR1cmU+IHtcbiAgICAgICAgUmVkdWNlKHJlZHVjZUNvcmUoaW50bzphY3Rpb246KSlcbiAgICAgICAgICAgIC5pZkxldChcbiAgICAgICAgICAgICAgICBcXC5vcHRpb25hbENoaWxkLFxuICAgICAgICAgICAgICAgICBhY3Rpb246IFwvQWN0aW9uLm9wdGlvbmFsQ2hpbGQsXG4gICAgICAgICAgICAgICAgIHRoZW46IHsgQ2hpbGQyKCkgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgU2NvcGUoXG4gICAgICAgICAgICAgICAgc3RhdGU6IFxcLmNoaWxkLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogXC9BY3Rpb24uY2hpbGQsXG4gICAgICAgICAgICAgICAgY2hpbGQ6IENoaWxkMS5TdGF0ZSgpIH1cbiAgICAgICAgICAgIClcbiAgICB9XG5cbiAgICBcL1wvIE1BUks6IC0gQ29yZSBSZWR1Y2VyXG5cbiAgICBpbnRlcm5hbCBmdW5jIHJlZHVjZUNvcmUoXG4gICAgICAgIGludG8gc3RhdGU6IGlub3V0IFN0YXRlLFxuICAgICAgICBhY3Rpb246IEFjdGlvblxuICAgICkgLT4gQ29tcG9zYWJsZUFyY2hpdGVjdHVyZS5FZmZlY3Q8QWN0aW9uPiB7XG4gICAgICAgIHN3aXRjaCBhY3Rpb24ge1xuICAgICAgICBjYXNlIC5wbGFjZWhvbGRlcjpcbiAgICAgICAgICAgIHJldHVybiAubm9uZVxuICAgICAgICBjYXNlIGxldCAuY2hpbGQoY2hpbGRBY3Rpb24pOlxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZUNoaWxkMS5TdGF0ZShcbiAgICAgICAgICAgICAgICBpbnRvOiAmc3RhdGUsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBjaGlsZEFjdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICBjYXNlIGxldCAub3B0aW9uYWxDaGlsZChvcHRpb25hbENoaWxkQWN0aW9uKTpcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VDaGlsZDIuU3RhdGU\/KFxuICAgICAgICAgICAgICAgIGludG86ICZzdGF0ZSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IG9wdGlvbmFsQ2hpbGRBY3Rpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFwvXC8gTUFSSzogLSBDaGlsZCBSZWR1Y2VyXG5cbiAgICBpbnRlcm5hbCBmdW5jIHJlZHVjZUNoaWxkMShcbiAgICAgICAgaW50byBzdGF0ZTogaW5vdXQgU3RhdGUsXG4gICAgICAgIGFjdGlvbjogQ2hpbGQxQWN0aW9uXG4gICAgKSAtPiBDb21wb3NhYmxlQXJjaGl0ZWN0dXJlLkVmZmVjdDxBY3Rpb24+IHtcbiAgICAgICAgc3dpdGNoIGFjdGlvbiB7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAubm9uZSBcL1wvIFRPRE86IHJlbW92ZSBkZWZhdWx0YCBjYXNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcL1wvIE1BUks6IC0gT3B0aW9uYWxDaGlsZCBSZWR1Y2VyXG5cbiAgICBpbnRlcm5hbCBmdW5jIHJlZHVjZUNoaWxkMihcbiAgICAgICAgaW50byBzdGF0ZTogaW5vdXQgU3RhdGUsXG4gICAgICAgIGFjdGlvbjogQ2hpbGQyQWN0aW9uXG4gICAgKSAtPiBDb21wb3NhYmxlQXJjaGl0ZWN0dXJlLkVmZmVjdDxBY3Rpb24+IHtcbiAgICAgICAgc3dpdGNoIGFjdGlvbiB7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAubm9uZSBcL1wvIFRPRE86IHJlbW92ZSBkZWZhdWx0YCBjYXNlXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXC9cLyBNQVJLOiAtIFNjZW5lXG5cbmV4dGVuc2lvbiBDb21wb3NlZEZlYXR1cmUge1xuICAgIGludGVybmFsIHN0cnVjdCBTY2VuZTogVmlldyB7XG4gICAgICAgIGxldCBzdG9yZTogU3RvcmVPZjxDb21wb3NlZEZlYXR1cmU+XG5cbiAgICAgICAgaW50ZXJuYWwgaW5pdChzdG9yZTogU3RvcmVPZjxDb21wb3NlZEZlYXR1cmU+KSB7XG4gICAgICAgICAgICBzZWxmLnN0b3JlID0gc3RvcmVcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVybmFsIHZhciBib2R5OiBzb21lIFZpZXcge1xuICAgICAgICAgICAgWlN0YWNrIHtcbiAgICAgICAgICAgICAgICBUZXh0KFwiQ29tcG9zZWRGZWF0dXJlU2NlbmVcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5mcmFtZShtYXhXaWR0aDogLmluZmluaXR5LCBtYXhIZWlnaHQ6IC5pbmZpbml0eSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXC9cLyBNQVJLOiBQcmV2aWV3XG5zdHJ1Y3QgQ29tcG9zZWRGZWF0dXJlU2NlbmVfUHJldmlld3M6IFByZXZpZXdQcm92aWRlciB7XG4gICAgc3RhdGljIHZhciBwcmV2aWV3czogc29tZSBWaWV3IHtcbiAgICAgICAgQ29tcG9zZWRGZWF0dXJlLlNjZW5lKFxuICAgICAgICAgICAgc3RvcmU6IC5pbml0KFxuICAgICAgICAgICAgICAgIGluaXRpYWxTdGF0ZTogQ29tcG9zZWRGZWF0dXJlLlN0YXRlKCksXG4gICAgICAgICAgICAgICAgcmVkdWNlcjogeyBFbXB0eVJlZHVjZXIoKSB9XG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICB9XG59XG5cblwvXC8gTUFSSzogLSBTdGF0ZVxuXG5leHRlbnNpb24gU2ltcGxlRmVhdHVyZSB7XG4gICAgaW50ZXJuYWwgc3RydWN0IFN0YXRlOiBFcXVhdGFibGUge1xuICAgICAgICBpbnRlcm5hbCB2YXIgbmFtZTogU3RyaW5nXG4gICAgICAgIGludGVybmFsIHZhciBkZXNjcmlwdGlvbjogU3RyaW5nP1xuICAgICAgICBpbnRlcm5hbCB2YXIgbnVtYmVyT2ZJdGVtczogSW50XG5cbiAgICAgICAgaW50ZXJuYWwgaW5pdChcbiAgICAgICAgICAgIG5hbWU6IFN0cmluZyA9IFwiXCIsIFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFN0cmluZz8gPSBuaWwsIFxuICAgICAgICAgICAgbnVtYmVyT2ZJdGVtczogSW50ID0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHNlbGYubmFtZSA9IG5hbWVcbiAgICAgICAgICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgc2VsZi5udW1iZXJPZkl0ZW1zID0gbnVtYmVyT2ZJdGVtc1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cL1wvIE1BUks6IC0gQWN0aW9uc1xuXG5leHRlbnNpb24gU2ltcGxlRmVhdHVyZSB7XG4gICAgaW50ZXJuYWwgZW51bSBBY3Rpb246IEVxdWF0YWJsZSB7XG4gICAgICAgIGNhc2UgcGxhY2Vob2xkZXJcbiAgICB9XG59XG5cblwvXC8gTUFSSzogLSBSZWR1Y2VyXG5cbmludGVybmFsIHN0cnVjdCBTaW1wbGVGZWF0dXJlOiBSZWR1Y2VyIHtcbiAgICBcL1wvIE1BUks6IC0gRGVwZW5kZW5jaWVzXG5cbiAgICBARGVwZW5kZW5jeShcXC5maXJlQW5kRm9yZ2V0KSB2YXIgZmlyZUFuZEZvcmdldFxuXG4gICAgXC9cLyBNQVJLOiAtIFJlZHVjZXJcblxuICAgIGludGVybmFsIGZ1bmMgcmVkdWNlKFxuICAgICAgICBpbnRvIHN0YXRlOiBpbm91dCBTdGF0ZSxcbiAgICAgICAgYWN0aW9uOiBBY3Rpb25cbiAgICApIC0+IENvbXBvc2FibGVBcmNoaXRlY3R1cmUuRWZmZWN0PEFjdGlvbj4ge1xuICAgICAgICBzd2l0Y2ggYWN0aW9uIHtcbiAgICAgICAgY2FzZSAucGxhY2Vob2xkZXI6XG4gICAgICAgICAgICByZXR1cm4gLm5vbmVcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXC9cLyBNQVJLOiAtIFNjZW5lXG5cbmV4dGVuc2lvbiBTaW1wbGVGZWF0dXJlIHtcbiAgICBpbnRlcm5hbCBzdHJ1Y3QgU2NlbmU6IFZpZXcge1xuICAgICAgICBsZXQgc3RvcmU6IFN0b3JlT2Y8U2ltcGxlRmVhdHVyZT5cblxuICAgICAgICBpbnRlcm5hbCBpbml0KHN0b3JlOiBTdG9yZU9mPFNpbXBsZUZlYXR1cmU+KSB7XG4gICAgICAgICAgICBzZWxmLnN0b3JlID0gc3RvcmVcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVybmFsIHZhciBib2R5OiBzb21lIFZpZXcge1xuICAgICAgICAgICAgWlN0YWNrIHtcbiAgICAgICAgICAgICAgICBUZXh0KFwiU2ltcGxlRmVhdHVyZVNjZW5lXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuZnJhbWUobWF4V2lkdGg6IC5pbmZpbml0eSwgbWF4SGVpZ2h0OiAuaW5maW5pdHkpXG4gICAgICAgIH1cbiAgICB9XG59XG5cblwvXC8gTUFSSzogUHJldmlld1xuc3RydWN0IFNpbXBsZUZlYXR1cmVTY2VuZV9QcmV2aWV3czogUHJldmlld1Byb3ZpZGVyIHtcbiAgICBzdGF0aWMgdmFyIHByZXZpZXdzOiBzb21lIFZpZXcge1xuICAgICAgICBTaW1wbGVGZWF0dXJlLlNjZW5lKFxuICAgICAgICAgICAgc3RvcmU6IC5pbml0KFxuICAgICAgICAgICAgICAgIGluaXRpYWxTdGF0ZTogU2ltcGxlRmVhdHVyZS5TdGF0ZSgpLFxuICAgICAgICAgICAgICAgIHJlZHVjZXI6IHsgRW1wdHlSZWR1Y2VyKCkgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfVxufSIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjYzNSwiZmlsZVVSTCI6ImZpbGU6XC9cL1wvVXNlcnNcL2JvY2F0ZWR1XC9hZGlkYXNcL2RldmVsb3BtZW50XC9Tb3VyY2VyeVJlc291cmNlc1wvVENBU2NlbmUtUmVkdWNlclByb3RvY29sXC9UQ0FGZWF0dXJlJTIwLSUyMFJlZHVjZXJQcm90b2NvbC5zb3VyY2VyeXRlbXBsYXRlIiwicnVuQ29uZmlndXJhdGlvbiI6InNlbGVjdGlvbiIsInNhbXBsZUNvZGUiOiJzdHJ1Y3QgQ2hpbGQxOiBSZWR1Y2VyIHtcbiAgICBzdHJ1Y3QgU3RhdGU6IEVxdWF0YWJsZSB7fVxuICAgIGVudW0gQWN0aW9uOiBFcXVhdGFibGUge31cbiAgICBmdW5jIHJlZHVjZShpbnRvIHN0YXRlOiBpbm91dCBTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pIC0+IEVmZmVjdDxBY3Rpb24+IHsgLm5vbmUgfVxufVxuXG5zdHJ1Y3QgQ2hpbGQyOiBSZWR1Y2VyIHtcbiAgICBzdHJ1Y3QgU3RhdGU6IEVxdWF0YWJsZSB7fVxuICAgIGVudW0gQWN0aW9uOiBFcXVhdGFibGUge31cbiAgICBmdW5jIHJlZHVjZShpbnRvIHN0YXRlOiBpbm91dCBTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pIC0+IEVmZmVjdDxBY3Rpb24+IHsgLm5vbmUgfVxufVxuXG5cL1wvIHNvdXJjZXJ5OiBkZXNjcmliZXNUQ0FGZWF0dXJlXG5zdHJ1Y3QgU2ltcGxlRmVhdHVyZTogRXF1YXRhYmxlIHtcbiAgICB2YXIgbmFtZTogU3RyaW5nID0gXCJcIlxuICAgIHZhciBkZXNjcmlwdGlvbjogU3RyaW5nPyA9IG5pbFxuICAgIHZhciBudW1iZXJPZkl0ZW1zOiBJbnQgPSAwXG59XG5cblwvXC8gc291cmNlcnk6IGRlc2NyaWJlc1RDQUZlYXR1cmVcblwvXC8gc291cmNlcnk6IGNvbnRhaW5zQ29tcG9zaXRpb25cbnN0cnVjdCBDb21wb3NlZEZlYXR1cmU6IEVxdWF0YWJsZSB7XG4gICAgdmFyIG5hbWU6IFN0cmluZyA9IFwiXCJcbiAgICB2YXIgZGVzY3JpcHRpb246IFN0cmluZz8gPSBuaWxcbiAgICB2YXIgbnVtYmVyT2ZJdGVtczogSW50ID0gMFxuICAgIHZhciBjaGlsZDogQ2hpbGQxLlN0YXRlID0gLmluaXQoKVxuICAgIHZhciBvcHRpb25hbENoaWxkOiBDaGlsZDIuU3RhdGU\/ID0gbmlsXG59XG5cblwvXC8gTm90ZXM6XG5cL1wvIDEuIFRoZSBzZWxlY3RlZCBzdHJ1Y3QgaXMgb25seSB1c2VkIGFzIGEgc3BlY2lmaWNhdGlvbiBmb3IgdGhlIFRDQUZlYXR1cmUgXG5cL1wvIGFuZCBzaG91bGQgYmUgZGVsZXRlZCBhZnRlciBnZW5lcmF0aW9uXG5cL1wvIDIuIEFsbCBzcGVjaWZpY2F0aW9uIHN0cnVjdHMgc2hvdWxkIGNvbnRhaW4gYFwvXC8gc291cmNlcnk6IGRlc2NyaWJlc1RDQUZlYXR1cmVgIGFubm90YXRpb25cblwvXC8gMy4gSW4gY2FzZSB0aGUgc3BlY2lmaWNhdGlvbiBjb250YWlucyBvdGhlciBUQ0FGZWF0dXJlcyBhcyBwcm9wZXJ0aWVzIChpLmUuIENvbXBvc2l0aW9uKSxcblwvXC8gaXQgc2hvdWxkIGNvbnRhaW50IFwvXC8gc291cmNlcnk6IGNvbnRhaW5zQ29tcG9zaXRpb25gIGFubm90YXRpb24gIiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IlRDQUZlYXR1cmUgLSBSZWR1Y2VyUHJvdG9jb2wiLCJpbnNlcnRpb25Nb2RlIjoiZW5kT2ZGaWxlIn0="}